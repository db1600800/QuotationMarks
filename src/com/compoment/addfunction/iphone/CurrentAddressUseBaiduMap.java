package com.compoment.addfunction.iphone;

public class CurrentAddressUseBaiduMap {
	
	public void currentAddress()
	{
		String m="";
		
		m+="//\n";
		m+="//  StampTranCall.m\n";
		m+="//  Philately\n";
		m+="//\n";
		m+="//  Created by gdpost on 15/6/17.\n";
		m+="//  Copyright (c) 2015年 gdpost. All rights reserved.\n";
		m+="//\n";

		m+="#import \"StampTranCall.h\"\n";
		m+="#import \"SysBaseInfo.h\"\n";
		m+="#import <OperatorMsg.h>\n";
		m+="#import \"SVProgressHUD.h\"\n";
		m+="#import \"PromptError.h\"\n";
		m+="#import \"JSONKit.h\"\n";

		m+="#include <arpa/inet.h>\n";
		m+="#include <net/if.h>\n";
		m+="#include <ifaddrs.h>\n";
		m+="#import \"SVProgressHUD.h\"\n";

		m+="@implementation StampTranCall\n";



		m+="  NSTimer *timmer;\n";
		m+="bool isOpenLoading;\n";

		m+="-(void)jyTranCall:(SysBaseInfo *) sysBaseInfo  cstmMsg:(CstmMsg*)cstmMsg formName:(NSString*)formName business:(NSDictionary*)business delegate:(id<StampTranCallDelegate>)delegate viewController:(UIViewController*)viewController\n";
		m+="{\n";
		m+="    isOpenLoading=sysBaseInfo.isOpenLoading;\n";
		m+="    sysBaseInfo.isOpenLoading=false;\n";
		m+="    self.viewController=viewController;\n";
		m+="    self.delegate=delegate;\n";
		m+="    \n";

		m+="     dispatch_async(dispatch_get_main_queue(), ^{\n";
		m+="       \n";
		m+="         if ([SVProgressHUD isVisible]==true) {\n";
		m+="             \n";
		m+="         }else\n";
		m+="         {\n";
		m+="             [SVProgressHUD showWithStatus:@\"努力加载中...\" maskType:SVProgressHUDMaskTypeClear];\n";
		m+="         }\n";
		m+="     });\n";


		m+="    \n";
		m+="    NSMutableDictionary *tranBodyDic=[[NSMutableDictionary alloc] init];\n";
		m+="    tranBodyDic=business;\n";

		m+="   \n";
		m+="    NSMutableDictionary *tranheadDic=[[NSMutableDictionary alloc] init];\n";
		m+="    // 1	局号(包头使用)	H_BRCH_NO	字符	7\n";
		m+="    [tranheadDic setValue:@\"0000000\" forKey:@\"H_BRCH_NO\"];\n";
		m+="    // 2	柜员号(包头使用)	H_OPER_NO	字符	2\n";
		m+="    [tranheadDic setValue:@\"00\" forKey:@\"H_OPER_NO\"];\n";
		m+="    // 3	交易流水号	H_SEQ_NO	数字\n";
		m+="    [tranheadDic setValue:@\"10000176\" forKey:@\"H_SEQ_NO\"];\n";
		m+="    //  4	IP地址	H_IP_ADDR	字符	15\n";
		m+="    [tranheadDic setValue:@\"192.168.248.116\" forKey:@\"H_IP_ADDR\"];\n";
		m+="    //5	终端号(不带/dev/tty)	H_TTY	字符	100\n";
		m+="    [tranheadDic setValue:@\"pts_38\" forKey:@\"H_TTY\"];\n";
		m+="    // 6	授权柜员号	H_AUTH_OPER_NO	字符	4\n";
		m+="    [tranheadDic setValue:@\"FF\" forKey:@\"H_AUTH_OPER_NO\"];\n";
		m+="    //7	渠道流水号	H_CHANNEL_TRACE	字符	12\n";
		m+="    [tranheadDic setValue:@\"\" forKey:@\"H_CHANNEL_TRACE\"];\n";
		m+="    //  8	渠道标识	H_CHANNEL_NO	字符	2\n";
		m+="    [tranheadDic setValue:@\"01\" forKey:@\"H_CHANNEL_NO\"];\n";
		m+="    //  9	综合服务平台支局号	H_BRCH_NO_NEW	字符	8\n";
		m+="    [tranheadDic setValue:@\"52502100\" forKey:@\"H_BRCH_NO_NEW\"];\n";
		m+="    // 10	综合服务平台柜员号码	H_OPER_NO_NEW	字符	4\n";
		m+="    [tranheadDic setValue:@\"Q071\" forKey:@\"H_OPER_NO_NEW\"];\n";
		m+="    // 11	上送文件数量循环域开始	H_SFILE_NUM	数字\n";
		m+="    [tranheadDic setValue:@\"0000\" forKey:@\"H_SFILE_NUM\"];\n";
		m+="    // 12	不带路径上送文件名	H_SEND_FILE	字符	60\n";
		m+="   // [tranheadDic setValue:@\"440000004509\" forKey:@\"H_SEND_FILE\"];\n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="   // NSMutableDictionary *sendDataDic=[[NSMutableDictionary alloc] init];\n";
		m+="    [tranBodyDic setValue:tranheadDic forKey:@\"SNDMSG_HEAD\"];\n";
		m+="//      [sendDataDic setValue:tranBodyDic forKey:@\"tranBody\"];\n";
		m+="//    \n";
		m+="//    NSMutableDictionary *fullDic=[[NSMutableDictionary alloc] init];\n";
		m+="//    [fullDic setValue:sendDataDic forKey:@\"sendData\"];\n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="   ServiceInvoker *serviceInvoker=[ServiceInvoker sharedInstance];\n";
		m+="    [serviceInvoker  setDelegate:self];\n";

		m+="     NSLog(@\"hobby request %@ %@\",formName,tranBodyDic);\n";
		m+="    [serviceInvoker callWebservice:tranBodyDic formName:formName ];\n";

		m+="    \n";
		m+="    timmer  = [NSTimer scheduledTimerWithTimeInterval:35 target:self selector:@selector(timeFire) userInfo:nil repeats:NO];\n";

		m+="}\n";

		m+="-(void)timeFire\n";
		m+="{\n";
		m+="       [SVProgressHUD dismiss];\n";
		m+="    \n";
		m+="//    MsgReturn *msgReturn= [[MsgReturn alloc]init ];\n";
		m+="//    msgReturn.errorCode=ERROR_TIMEOUT_ERROR ;\n";
		m+="//    msgReturn.errorDesc=ERROR_TIMEOUT;\n";
		m+="//    msgReturn.errorType=@\"01\";\n";
		m+="//    [PromptError changeShowErrorMsg:msgReturn title:@\"\"  viewController:self block:^(BOOL OKCancel)\n";
		m+="//     {\n";
		m+="//         if (OKCancel) {\n";
		m+="//             \n";
		m+="//         }else\n";
		m+="//         {\n";
		m+="//             \n";
		m+="//         }\n";
		m+="//         return ;\n";
		m+="//     }\n";
		m+="//     ];\n";
		m+="    \n";
		m+=" \n";

		m+="}\n";


		m+="//业务请求返回错误\n";
		m+="-(void)serviceInvokerError:(MsgReturn*)msgReturn\n";
		m+="{\n";
		m+="    if (msgReturn==nil ) {\n";
		m+="        return;\n";
		m+="    }\n";
		m+="    \n";
		m+="       [timmer invalidate];\n";
		m+="     timmer=nil;\n";
		m+="      dispatch_async(dispatch_get_main_queue(), ^{\n";
		m+="        [SVProgressHUD dismiss];\n";
		m+="      });\n";
		m+="  \n";
		m+="  \n";
		m+="    \n";
		m+="   if(msgReturn.formName!=nil && [msgReturn.errorCode isEqualToString:ERROR_FAILED])\n";
		m+="    {//交易失败\n";
		m+="        \n";
		m+="        \n";
		m+="    }\n";
		m+="    \n";
		m+="    else\n";
		m+="    {\n";
		m+="        //网络错误 服务器错误  传输格式错误\n";
		m+="        if([msgReturn.errorCode isEqualToString:ERROR_DATA_FORMAT_ERROR] || [msgReturn.errorCode isEqualToString:ERROR_SERVICE_IN_ERROR] || [msgReturn.errorCode isEqualToString:ERROR_NOT_NET])\n";
		m+="            \n";
		m+="        {\n";
		m+="           \n";
		m+="            \n";
		m+="          \n";
		m+="            [PromptError changeShowErrorMsg:msgReturn title:@\"\"  viewController:self block:^(BOOL OKCancel)\n";
		m+="             {\n";
		m+="                 if (OKCancel) {\n";
		m+="                     \n";
		m+="                 }else\n";
		m+="                 {\n";
		m+="                     \n";
		m+="                 }\n";
		m+="                 return ;\n";
		m+="             }\n";
		m+="             ];\n";

		m+="        }\n";
		m+="    }\n";
		m+="       [self.delegate ReturnError:msgReturn];\n";
		m+="    \n";
		m+="    NSLog(@\"%@ %@\",msgReturn.formName,msgReturn.errorDesc);\n";
		m+="    \n";
		m+="}\n";

		m+="//业务请求返回数据\n";
		m+="-(void)serviceInvokerReturnData:(MsgReturn*)msgReturn\n";
		m+="{\n";
		m+="    [timmer invalidate];\n";
		m+="    timmer=nil;\n";
		m+="    \n";
		m+="    if([msgReturn.errorCode isEqualToString:ERROR_SUCCESS])\n";
		m+="    {//callWebservice成功\n";
		m+="        \n";
		m+="        if ([msgReturn.formName isEqual:@\"JY0052\"]||[msgReturn.formName isEqual:@\"JY0049\"]) {\n";
		m+="            \n";
		m+="        }\n";
		m+="        else\n";
		m+="        {\n";
		m+="              dispatch_async(dispatch_get_main_queue(), ^{\n";
		m+="                  if (isOpenLoading) {//true开着\n";
		m+="                      \n";
		m+="                  }else\n";
		m+="                  {//false 关闭\n";
		m+="                  [SVProgressHUD dismiss];\n";
		m+="                  }\n";
		m+="               \n";
		m+="              });\n";
		m+="      \n";
		m+="        }\n";
		m+="        \n";
		m+="        \n";
		m+="        \n";
		m+="        NSMutableDictionary* map=msgReturn.map;\n";
		m+="        NSString *businessParamString=[map objectForKey:@\"businessParam\"];\n";
		m+="        NSDictionary *businessParamDic=[businessParamString objectFromJSONString];\n";
		m+="        NSString *data=[businessParamDic objectForKey:@\"data\"];\n";
		m+="        msgReturn.map=[data objectFromJSONString];\n";
		m+="        NSMutableDictionary *returnDataDic=[[data objectFromJSONString] objectForKey:@\"returnData\"];\n";
		m+="        NSMutableDictionary *returnHeadDic=[returnDataDic objectForKey:@\"returnHead\"];\n";
		m+="        NSString *respCode=[returnHeadDic objectForKey:@\"respCode\"];\n";
		m+="        NSString *respDesc=[returnHeadDic objectForKey:@\"respDesc\"];\n";
		m+="        \n";
		m+="        NSMutableDictionary *returnBodyDic=[returnDataDic objectForKey:@\"returnBody\"];\n";
		m+="    \n";
		m+="     \n";
		m+="        [self.delegate ReturnData:msgReturn];\n";
		m+="        \n";
		m+="        \n";
		m+="    }else{//错误码 非0000\n";
		m+="    \n";
		m+="           dispatch_async(dispatch_get_main_queue(), ^{\n";
		m+="                              [SVProgressHUD dismiss];\n";
		m+="               \n";
		m+="           });\n";
		m+="        \n";
		m+="        NSLog(@\"%@ %@\",msgReturn.errorCode,msgReturn.errorDesc);\n";
		m+="        \n";
		m+="  \n";
		m+="  \n";
		m+="        [PromptError changeShowErrorMsg:msgReturn title:nil viewController:self.viewController block:^(BOOL OKCancel){\n";
		m+="            if (OKCancel) {\n";
		m+="                      [self.delegate ReturnError:msgReturn];\n";
		m+="            }\n";
		m+="        \n";
		m+="        } ];\n";
		m+="    }\n";
		m+="    \n";
		m+="}\n";



		m+="//实现一个创建单例对象的类方法\n";

		m+="static StampTranCall *objName = nil;\n";

		m+="+ (StampTranCall *) sharedInstance{\n";
		m+="    static dispatch_once_t oneToken = 0;\n";
		m+="    dispatch_once(&oneToken, ^{\n";
		m+="        objName = [[super allocWithZone: NULL] init];\n";
		m+="    });\n";
		m+="    return objName;\n";
		m+="}\n";

		m+="//重写几个方法，防止创建单例对象时出现错误\n";
		m+="-(id) init{\n";
		m+="    if(self = [super init])\n";
		m+="    {\n";
		m+="        //初始化单例对象的各种属性\n";
		m+="    }\n";
		m+="    return self;\n";
		m+="}\n";

		m+="+(id)allocWithZone: (struct _NSZone *) zone{\n";
		m+="    return [self sharedInstance];\n";
		m+="}\n";

		m+="//这是单例对象遵循<NSCopying>协议时需要实现的方法\n";
		m+="-(id) copyWithZone: (struct _NSZone *)zone{\n";
		m+="    return self;\n";
		m+="}\n";




		m+="-(void)appSignIn:(NSString*)appId appVersion:(NSString*)appVersion {\n";
		m+="    \n";
		m+="    \n";
		m+="    [self clearService];\n";
		m+="    //    appId = @\"gd.proj183.ios\";// 软件唯一标识\n";
		m+="    //    appVersion = @\"2.4\";// 软件版本号\n";
		m+="    \n";
		m+="    RSAUtil *rsaUtil = [RSAUtil shareInstance];\n";
		m+="    \n";
		m+="    RSA *_rsa=[rsaUtil generateRSA:1024];\n";
		m+="    \n";
		m+="    //公钥字符\n";
		m+="    NSString *publicKeyStringX509=[rsaUtil getPublicKeyStringX509:_rsa];\n";
		m+="    //私钥字符\n";
		m+="    NSString *privateKeyStringPKCS1=[rsaUtil getPrivateKeyStringPKCS1:_rsa ];\n";
		m+="    \n";
		m+="    NSUserDefaults *userDefault=[NSUserDefaults standardUserDefaults];\n";
		m+="    [userDefault setObject:appId forKey:@\"appId\"];\n";
		m+="    [userDefault setObject:appVersion forKey:@\"appVer\"];\n";
		m+="    [userDefault setObject:publicKeyStringX509 forKey:@\"publicKeyStringX509\"];\n";
		m+="    [userDefault setObject:privateKeyStringPKCS1 forKey:@\"privateKeyStringPKCS1\"];\n";
		m+="    \n";
		m+="    [userDefault synchronize];\n";
		m+="    \n";
		m+="    [self rsaPublicKey];\n";
		m+="}\n";

		m+="/**\n";
		m+=" * 2.2.1获取接入平台RSA公钥\n";
		m+=" */\n";
		m+="-(void) rsaPublicKey {\n";
		m+="    \n";
		m+="    self.formName=@\"rsaPublicKey\";\n";
		m+="    \n";
		m+="    NSUserDefaults *userDefault=[NSUserDefaults standardUserDefaults];\n";
		m+="    NSString *appID=[userDefault objectForKey:@\"appId\"];\n";
		m+="    NSString *appVersion=[userDefault objectForKey:@\"appVer\"];\n";
		m+="    \n";
		m+="    \n";
		m+="    // 获取接入平台RSA公钥报文组装\n";
		m+="    NSMutableDictionary *rootParam = [[NSMutableDictionary alloc ] init];\n";
		m+="    NSMutableDictionary *jsonBusinessParam =  [[NSMutableDictionary alloc ] init];\n";
		m+="    [rootParam setValue:@\"rsaPublicKeyDeepProc\" forKey:@\"action\"];//rsaPublicKeyDeepProc   rsaPublicKey\n";
		m+="    [jsonBusinessParam setValue:appID forKey:@\"appId\"];// Appid\n";
		m+="    [jsonBusinessParam setValue:appVersion forKey:@\"appVer\"];// App版本\n";
		m+="    \n";
		m+="    [rootParam setValue:jsonBusinessParam forKey:@\"param\"];\n";
		m+="    \n";
		m+="    //NSString *request =[self dic2jsonString:rootParam];\n";
		m+="    \n";
		m+="    [[GSNetService sharedInstance] sendMsg:rootParam toServerOnFormName:@\"rsaPublicKey\" withDelegate:self];\n";
		m+="    \n";
		m+="}\n";


		m+="-(void)fileUp:(NSString*)appID map:(NSMutableDictionary*)map\n";
		m+="{\n";
		m+="    //    参数1：appID唯一标识 取 SysBaseInfo.appID\n";
		m+="    //    参数2：map取值如下：\n";
		m+="    //\n";
		m+="    //    fileName  文件名称 ：取当前文件的文件名\n";
		m+="    //    fileSize  文件大小 ：相关api取当前文件大小\n";
		m+="    //    fileType  文件类型 ： 01 图片\n";
		m+="    //    md5	  文件md5值：计算当前文件md5值\n";
		m+="    //    uploadPath 	上传存放路径：空\n";
		m+="    //    requestFileData  文件二进制字节流：当前图片文件转换为二进制流\n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="    self.formName=@\"fileUp\";\n";
		m+="    \n";
		m+="    //    NSUserDefaults *userDefault=[NSUserDefaults standardUserDefaults];\n";
		m+="    //    NSString *appID=[userDefault objectForKey:@\"appId\"];\n";
		m+="    //    NSString *appVersion=[userDefault objectForKey:@\"appVer\"];\n";
		m+="    \n";
		m+="    \n";
		m+="    // 获取接入平台RSA公钥报文组装\n";
		m+="    NSMutableDictionary *rootParam = [[NSMutableDictionary alloc ] init];\n";
		m+="    NSMutableDictionary *jsonBusinessParam =  [[NSMutableDictionary alloc ] init];\n";
		m+="    //[rootParam setValue:@\"fileUp\" forKey:@\"action\"];\n";
		m+="    \n";
		m+="    [jsonBusinessParam setValue:appID forKey:@\"appId\"];// Appid\n";
		m+="    [jsonBusinessParam setValue:[map objectForKey:@\"fileName\"]  forKey:@\"fileName\"];// App版本\n";
		m+="    [jsonBusinessParam setValue:[map objectForKey:@\"fileSize\"]  forKey:@\"fileSize\"];// App版本\n";
		m+="    [jsonBusinessParam setValue:[map objectForKey:@\"fileType\"]  forKey:@\"fileType\"];// App版本\n";
		m+="    [jsonBusinessParam setValue:[map objectForKey:@\"md5\"]  forKey:@\"md5\"];// App版本\n";
		m+="    [jsonBusinessParam setValue:[map objectForKey:@\"uploadPath\"] forKey:@\"uploadPath\"];// App版本\n";
		m+="    \n";
		m+="    \n";
		m+="    [rootParam setValue:jsonBusinessParam forKey:@\"requestHeadPara\"];\n";
		m+="//    [rootParam setValue:[map objectForKey:@\"requestFileData\"] forKey:@\"requestFileData\"];\n";

		m+="    [rootParam setValue:[map objectForKey:@\"requestFileData\"]  forKey:@\"requestFileData\"];\n";
		m+="    \n";
		m+="    \n";
		m+="    NSString *baseUrl=[NSString stringWithFormat:@\"%@%@%@\",url_portal,server_url,@\"/chinapost/AppImgUploadServlet\"];\n";
		m+="    \n";
		m+="//    NSString *baseUrl=@\"http://jycshj.183.gd.cn/chinapost/AppImgUploadServlet\";\n";
		m+="    NSString *fullUrl = baseUrl ;\n";
		m+="    NSURL *url = [NSURL URLWithString:[fullUrl stringByAddingPercentEscapesUsingEncoding: NSUTF8StringEncoding]];\n";
		m+="    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];\n";
		m+="    [request setTimeoutInterval:TIMEOUT/1000];\n";
		m+="    request.HTTPMethod=@\"POST\";\n";
		m+="    //把拼接后的字符串转换为data，设置请求体\n";
		m+="    NSString *sendstr = [rootParam JSONString];\n";
		m+="    NSData* tmdata =[sendstr dataUsingEncoding:NSUTF8StringEncoding];\n";
		m+="    \n";
		m+="//    NSLog(@\"sendstr:%@\",sendstr);\n";
		m+="//    NSLog(@\"tmdata:%@\",tmdata);\n";
		m+="    \n";
		m+="    request.HTTPBody=tmdata;\n";
		m+="//    request.HTTPBody=[[rootParam JSONString] dataUsingEncoding:NSUTF8StringEncoding];\n";
		m+="    \n";
		m+="    NSOperationQueue *queue = [[NSOperationQueue alloc]init];\n";
		m+="    [NSURLConnection sendAsynchronousRequest:request\n";
		m+="                                       queue:queue\n";
		m+="                           completionHandler:^(NSURLResponse *response, NSData *data, NSError *error){\n";
		m+="                               if (error) {\n";
		m+="                                   \n";
		m+="                                   \n";
		m+="                                   //交易失败  回调\n";
		m+="                                   MsgReturn *msgReturn=[[MsgReturn alloc ] init ];\n";
		m+="                                   msgReturn.errorCode=ERROR_FAILED;\n";
		m+="                                   msgReturn.errorDesc=@\"文件上传失败\";\n";
		m+="                                   msgReturn.formName=@\"fileUp\";\n";
		m+="                                   \n";
		m+="                                   [delegate serviceInvokerError:msgReturn];\n";
		m+="                                   \n";
		m+="                               }else{\n";
		m+="                                   \n";
		m+="                                   NSInteger responseCode = [(NSHTTPURLResponse *)response statusCode];\n";
		m+="                                   \n";
		m+="                                   NSString *responseString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n";
		m+="                                   \n";
		m+="                                   \n";
		m+="//                                   NSDictionary *returnDataDic=[self jsonString2Dic:[responseString base64DecodedData] ];\n";
		m+="                                   NSDictionary *returnDataDic=[self jsonString2Dic:[responseString dataUsingEncoding:NSUTF8StringEncoding] ];\n";

		m+="                                   \n";
		m+="                                   NSString *code = [returnDataDic objectForKey:@\"returnCode\"];\n";
		m+="                                   \n";
		m+="                                   if ([code isEqualToString:@\"0000\"]) {\n";
		m+="                                       \n";
		m+="                                       NSString *desc = [returnDataDic objectForKey:@\"returnDesc\"];\n";
		m+="                                       NSMutableDictionary *date = [returnDataDic objectForKey:@\"returnDate\"];\n";
		m+="                                       \n";
		m+="                                       NSString *imageId = [date objectForKey:@\"imageId\"];\n";
		m+="                                       \n";
		m+="                                       \n";
		m+="                                       \n";
		m+="                                       \n";
		m+="                                       //交易成功  回调\n";
		m+="                                       MsgReturn *msgReturn=[[MsgReturn alloc ] init ];\n";
		m+="                                       msgReturn.errorCode=ERROR_SUCCESS;\n";
		m+="                                       msgReturn.errorDesc=@\"文件上传成功\";\n";
		m+="                                       msgReturn.formName=@\"fileUp\";\n";
		m+="                                       msgReturn.map=date;\n";
		m+="                                       [delegate serviceInvokerReturnData:msgReturn];\n";
		m+="                                   }else\n";
		m+="                                   {\n";
		m+="                                       //交易失败  回调\n";
		m+="                                       MsgReturn *msgReturn=[[MsgReturn alloc ] init ];\n";
		m+="                                       msgReturn.errorCode=ERROR_FAILED;\n";
		m+="                                       msgReturn.errorDesc=@\"文件上传失败\";\n";
		m+="                                       msgReturn.formName=@\"fileUp\";\n";
		m+="                                       \n";
		m+="                                       [delegate serviceInvokerError:msgReturn];\n";
		m+="                                   }                                   \n";
		m+="                                \n";
		m+="                               }\n";
		m+="                           }];\n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="}\n";



		m+="//签到\n";
		m+="-(void) appSignIn\n";
		m+="{\n";
		m+="    self.formName=@\"appSignIn\";\n";
		m+="    \n";
		m+="    NSUserDefaults *userDefault=[NSUserDefaults standardUserDefaults];\n";
		m+="    NSString *appID=[userDefault objectForKey:@\"appId\"];\n";
		m+="    NSString *appVersion=[userDefault objectForKey:@\"appVer\"];\n";
		m+="    NSString *publicKeyStringX509=[userDefault  objectForKey:@\"publicKeyStringX509\"];\n";
		m+="    \n";
		m+="    NSString *publicKeyStringX509ServerVer=[userDefault  objectForKey:@\"publicKeyStringX509ServerVer\"];\n";
		m+="    NSString *publicKeyStringX509Server=[userDefault  objectForKey:@\"publicKeyStringX509Server\"];\n";
		m+="    \n";
		m+="    \n";
		m+="    if (publicKeyStringX509Server==NULL) {\n";
		m+="        \n";
		m+="        return;\n";
		m+="    }\n";
		m+="    \n";
		m+="    RSAUtil *rsaUtil = [RSAUtil shareInstance];\n";
		m+="    \n";
		m+="    NSMutableDictionary *rootParam = [[NSMutableDictionary alloc ] init];\n";
		m+="    NSMutableDictionary *jsonBusinessParam =  [[NSMutableDictionary alloc ] init];\n";
		m+="    NSMutableDictionary *message =  [[NSMutableDictionary alloc ] init];\n";
		m+="    \n";
		m+="    [rootParam setValue:@\"appSignIn\" forKey:@\"action\"];\n";
		m+="    [jsonBusinessParam setValue:appID forKey:@\"appId\"];// Appid\n";
		m+="    [jsonBusinessParam setValue:appVersion forKey:@\"appVer\"];// App版本\n";
		m+="    [jsonBusinessParam setValue:publicKeyStringX509ServerVer forKey:@\"keyVer\"];\n";
		m+="    \n";
		m+="    [message setValue:publicKeyStringX509 forKey:@\"appKey\"];\n";
		m+="    \n";
		m+="    NSUserDefaults *userdefalut=[NSUserDefaults standardUserDefaults];\n";
		m+="    \n";
		m+="    NSString *logicId=[userdefalut objectForKey:@\"logicId\"];\n";
		m+="    if(logicId==NULL)\n";
		m+="    {\n";
		m+="        [message setValue:@\"\" forKey:@\"logicId\"];\n";
		m+="    }else{\n";
		m+="        \n";
		m+="        [message setValue:logicId forKey:@\"logicId\"];\n";
		m+="    }\n";
		m+="    \n";
		m+="    //Rsa只含公钥对象\n";
		m+="    RSA *publicRSA=[rsaUtil string2PublickeyFormartX509:publicKeyStringX509Server ];\n";
		m+="    \n";
		m+="    NSData *encryptData = [rsaUtil encryptLongString:KeyTypePublic rsa:publicRSA paddingType:RSA_PADDING_TYPE_PKCS1 plainText:[self dic2jsonString:message ] usingEncoding:NSUTF8StringEncoding];\n";
		m+="    NSString *encryptString =[encryptData base64EncodedString];\n";
		m+="    \n";
		m+="    \n";
		m+="    [jsonBusinessParam setValue:encryptString forKey:@\"message\"];\n";
		m+="    \n";
		m+="    [rootParam setValue:jsonBusinessParam forKey:@\"param\"];\n";
		m+="    \n";
		m+="    [[GSNetService sharedInstance] sendMsg:rootParam toServerOnFormName:@\"appSignIn\" withDelegate:self];\n";
		m+="    \n";
		m+="}\n";



		m+="//报文流水重置\n";
		m+="-(void) messageIdReset\n";
		m+="{\n";
		m+="    self.formName=@\"messageIdReset\";\n";
		m+="    \n";
		m+="    \n";
		m+="    NSUserDefaults *userDefault=[NSUserDefaults standardUserDefaults];\n";
		m+="    NSString *appID=[userDefault objectForKey:@\"appId\"];\n";
		m+="    NSString *appVersion=[userDefault objectForKey:@\"appVer\"];\n";
		m+="    \n";
		m+="    NSString *publicKeyStringX509ServerVer=[userDefault  objectForKey:@\"publicKeyStringX509ServerVer\"];\n";
		m+="    NSString *publicKeyStringX509Server=[userDefault  objectForKey:@\"publicKeyStringX509Server\"];\n";
		m+="    \n";
		m+="    \n";
		m+="    if (publicKeyStringX509Server==NULL) {\n";
		m+="        \n";
		m+="        return;\n";
		m+="    }\n";
		m+="    \n";
		m+="    RSAUtil *rsaUtil = [RSAUtil shareInstance];\n";
		m+="    \n";
		m+="    NSMutableDictionary *rootParam = [[NSMutableDictionary alloc ] init];\n";
		m+="    NSMutableDictionary *jsonBusinessParam =  [[NSMutableDictionary alloc ] init];\n";
		m+="    NSMutableDictionary *message =  [[NSMutableDictionary alloc ] init];\n";
		m+="    \n";
		m+="    [rootParam setValue:@\"messageIdReset\" forKey:@\"action\"];\n";
		m+="    [jsonBusinessParam setValue:appID forKey:@\"appId\"];// Appid\n";
		m+="    [jsonBusinessParam setValue:appVersion forKey:@\"appVer\"];// App版本\n";
		m+="    [jsonBusinessParam setValue:publicKeyStringX509ServerVer forKey:@\"keyVer\"];\n";
		m+="    \n";
		m+="    \n";
		m+="    NSUserDefaults *userdefalut=[NSUserDefaults standardUserDefaults];\n";
		m+="    NSString *logicId=[userdefalut objectForKey:@\"logicId\"];\n";
		m+="    if(logicId==NULL)\n";
		m+="    {\n";
		m+="        [message setValue:@\"\" forKey:@\"logicId\"];\n";
		m+="    }else{\n";
		m+="        \n";
		m+="        [message setValue:logicId forKey:@\"logicId\"];\n";
		m+="    }\n";
		m+="    \n";
		m+="    //Rsa只含公钥对象\n";
		m+="    RSA *publicRSA=[rsaUtil string2PublickeyFormartX509:publicKeyStringX509Server ];\n";
		m+="    \n";
		m+="    NSData *encryptData = [rsaUtil encryptLongString:KeyTypePublic rsa:publicRSA paddingType:RSA_PADDING_TYPE_PKCS1 plainText:[self dic2jsonString:message ] usingEncoding:NSUTF8StringEncoding];\n";
		m+="    NSString *encryptString =[encryptData base64EncodedString];\n";
		m+="    \n";
		m+="    \n";
		m+="    [jsonBusinessParam setValue:encryptString forKey:@\"message\"];\n";
		m+="    \n";
		m+="    [rootParam setValue:jsonBusinessParam forKey:@\"param\"];\n";
		m+="    \n";
		m+="    [[GSNetService sharedInstance] sendMsg:rootParam toServerOnFormName:@\"messageIdReset\" withDelegate:self];\n";
		m+="    \n";
		m+="}\n";




		m+="NSMutableDictionary *cachebusinessParameter;\n";


		m+="//交易调用\n";
		m+="-(void) callWebservice:(NSMutableDictionary*) businessParameter  formName:(NSString*) _formName {\n";
		m+="    \n";
		m+="    self.formName=_formName;\n";
		m+="    self.callServiceFormName=_formName;\n";
		m+="    cachebusinessParameter=businessParameter;\n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="    NSUserDefaults *userDefault=[NSUserDefaults standardUserDefaults];\n";
		m+="    NSString *appId= [userDefault objectForKey:@\"appId\"];\n";
		m+="    NSString *appVer=[userDefault objectForKey:@\"appVer\"];\n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="    NSString *publicKeyStringX509Server=  [userDefault  objectForKey:@\"publicKeyStringX509Server\"];\n";
		m+="    NSString *publicKeyStringX509ServerVer= [userDefault objectForKey:@\"publicKeyStringX509ServerVer\"];\n";
		m+="    NSString *logicId= [userDefault objectForKey:@\"logicId\"];\n";
		m+="    \n";
		m+="    NSString *tokenType=[userDefault  objectForKey:@\"tokenType\"];\n";
		m+="    NSString *token=[userDefault  objectForKey:@\"token\"];\n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="    // 签到报文组装\n";
		m+="    NSMutableDictionary *rootParam = [[NSMutableDictionary alloc ] init];\n";
		m+="    NSMutableDictionary *jsonBusinessParam =  [[NSMutableDictionary alloc ] init];\n";
		m+="    [rootParam setValue:@\"business\" forKey:@\"action\"];\n";
		m+="    [jsonBusinessParam setValue:appId forKey:@\"appId\"];// Appid\n";
		m+="    [jsonBusinessParam setValue:appVer forKey:@\"appVer\"];// App版本\n";
		m+="    [jsonBusinessParam setValue:publicKeyStringX509ServerVer forKey:@\"keyVer\"];// 服务器公钥版本\n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="    NSMutableDictionary *message = [[NSMutableDictionary alloc ] init];\n";
		m+="    // 逻辑设备号\n";
		m+="    [message setValue:logicId forKey:@\"logicId\"];\n";
		m+="    // 业务类型代号\n";
		m+="    [message setValue:formName forKey:@\"functionId\"];\n";
		m+="    // 报文流水号\n";
		m+="    mMsgSeqNo=mMsgSeqNo+1;\n";
		m+="    NSNumber *seq=[NSNumber numberWithInt:mMsgSeqNo];\n";
		m+="    [message setValue:seq  forKey:@\"msgId\"];\n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="    // token类型\n";
		m+="    [message setValue:tokenType forKey:@\"tokenType\"];\n";
		m+="    // token\n";
		m+="    [message setValue:token forKey:@\"token\"];\n";
		m+="    // 主体报文\n";
		m+="    [message setValue:[businessParameter JSONString] forKey:@\"businessParam\"];\n";
		m+="    \n";
		m+="    // NSString *messageString=[message JSONString];\n";
		m+="    \n";
		m+="    RSAUtil *rsaUtil = [RSAUtil shareInstance];\n";
		m+="    \n";
		m+="    //Rsa只含公钥对象\n";
		m+="    RSA *publicRSA=[rsaUtil string2PublickeyFormartX509:publicKeyStringX509Server ];\n";
		m+="    \n";
		m+="    NSData *encryptData = [rsaUtil encryptLongString:KeyTypePublic rsa:publicRSA paddingType:RSA_PADDING_TYPE_PKCS1 plainText:[message JSONString] usingEncoding:NSUTF8StringEncoding];\n";
		m+="    NSString *encryptString =[encryptData base64EncodedString];\n";
		m+="    \n";
		m+="    \n";
		m+="    [jsonBusinessParam setValue:encryptString forKey:@\"message\"];\n";
		m+="    \n";
		m+="    \n";
		m+="    [rootParam setValue:jsonBusinessParam forKey:@\"param\"];\n";
		m+="    \n";
		m+="    [[GSNetService sharedInstance] sendMsg:rootParam toServerOnFormName:_formName withDelegate:self];\n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="}\n";





		m+="-(void)clearService\n";
		m+="{\n";
		m+="    NSUserDefaults *userDefault=[NSUserDefaults standardUserDefaults];\n";
		m+="    [userDefault setObject:@\"\" forKey:@\"appId\"];\n";
		m+="    [userDefault setObject:@\"\" forKey:@\"appVer\"];\n";
		m+="    [userDefault setObject:@\"\" forKey:@\"publicKeyStringX509\"];\n";
		m+="    [userDefault setObject:@\"\" forKey:@\"privateKeyStringPKCS1\"];\n";
		m+="    [userDefault setObject:@\"\" forKey:@\"publicKeyStringX509Server\"];\n";
		m+="    [userDefault setObject:@\"\" forKey:@\"publicKeyStringX509ServerVer\"];\n";
		m+="    //[userDefault setObject:@\"\" forKey:@\"logicId\"];\n";
		m+="    [userDefault setObject:@\"\" forKey:@\"tokenType\"];\n";
		m+="    [userDefault setObject:@\"\" forKey:@\"token\"];\n";
		m+="    [userDefault synchronize];\n";
		m+="    \n";
		m+="    \n";
		m+="    mMsgSeqNo = 1;// 报文流水号\n";
		m+="    \n";
		m+="}\n";

		m+="-(void) checkUpdates:(NSString*)appId appVersion:(NSString*)appVersion{\n";
		m+="    \n";
		m+="    Sql *sql=[[Sql alloc ]init];\n";
		m+="    \n";
		m+="    NSString *oldConfigFileVersion=[sql selectPM_SIGNSERVICE_CONFIGVERSION];\n";
		m+="    \n";
		m+="    if(oldConfigFileVersion==nil || [oldConfigFileVersion isEqualToString:@\"\"])\n";
		m+="    {\n";
		m+="        oldConfigFileVersion=@\"19000101.0.1\";\n";
		m+="    }\n";
		m+="    \n";
		m+="    self.formName=@\"checkUpdates\";\n";
		m+="    \n";
		m+="    NSUserDefaults *userDefault=[NSUserDefaults standardUserDefaults];\n";
		m+="    [userDefault setObject:appId forKey:@\"appId\"];\n";
		m+="    [userDefault setObject:appVersion forKey:@\"appVer\"];\n";
		m+="    \n";
		m+="    NSString *appID=appId;//[userDefault objectForKey:@\"appId\"];\n";
		m+="    NSString *appVer=appVersion;//[userDefault objectForKey:@\"appVer\"];\n";
		m+="    \n";
		m+="    // 获取接入平台RSA公钥报文组装\n";
		m+="    NSMutableDictionary *rootParam = [[NSMutableDictionary alloc ] init];\n";
		m+="    \n";
		m+="    [rootParam setValue:@\"startup\" forKey:@\"action\"];\n";
		m+="    [rootParam setValue:appID forKey:@\"appId\"];// Appid\n";
		m+="    [rootParam setValue:appVer forKey:@\"appVersion\"];// App版本\n";
		m+="    [rootParam setValue:oldConfigFileVersion forKey:@\"appConfigVersion\"];// App版本\n";
		m+="    [rootParam setValue:@\"\" forKey:@\"deviceId\"];// App版本\n";
		m+="    \n";
		m+="    NSLog(@\"checkupdates request :%@\",rootParam);\n";
		m+="    \n";
		m+="    [[GSNetService sharedInstance] sendMsg:rootParam toServerOnFormName:@\"checkUpdates\" withDelegate:self];\n";
		m+="    \n";
		m+="    \n";
		m+="    //http://202.105.44.4:8001/services/ChinaPostService?wsdl\n";
		m+="    \n";
		m+="    \n";
		m+="}\n";




		m+="#pragma GSNetServiceDelegate\n";
		m+="//业务请求返回\n";

		m+="-(void)netServiceError:(NSError*)error\n";
		m+="{\n";
		m+="    \n";
		m+="    //1.手机网络不通  ERROR_NOT_NET ERROR_TEXT_NOT_NET\n";
		m+="    //2.手机网络通,连不上服务器（服务器网络异常或服务器没开）\n";
		m+="    //3.连上服务器，超时无结果返回\n";
		m+="    //4.有返回结果，但数据格式错误\n";
		m+="    \n";
		m+="    NSUserDefaults *userDefaultes = [NSUserDefaults standardUserDefaults];\n";
		m+="    NSString *errortxt = [userDefaultes stringForKey:@\"errortxt\"];\n";
		m+="    NSString *errorcode = [userDefaultes stringForKey:@\"errorcode\"];\n";
		m+="    \n";

		m+="    \n";
		m+="    \n";
		m+=" \n";
		m+="    if ( error.code==-1005) {//网络丢失\n";
		m+="        \n";
		m+="        if(cachebusinessParameter!=nil)\n";
		m+="        {\n";
		m+="         [self callWebservice:cachebusinessParameter formName:self.callServiceFormName ];\n";
		m+="        \n";
		m+="          NSLog(@\"测试-1005%@\",error);\n";
		m+="        return;\n";
		m+="        }else\n";
		m+="        {\n";
		m+="            MsgReturn *msgReturn=[[MsgReturn alloc ] init ];\n";
		m+="            msgReturn.errorCode=@\"D001\";\n";
		m+="            msgReturn.errorDesc=errortxt;\n";
		m+="            msgReturn.formName=self.formName;\n";
		m+="            [delegate serviceInvokerError:msgReturn];\n";
		m+="           \n";
		m+="            return;\n";
		m+="        }\n";
		m+="    }\n";
		m+="    \n";
		m+="    if([errorcode isEqualToString:ERROR_DATA_FORMAT_ERROR] || [errorcode isEqualToString:ERROR_SERVICE_IN_ERROR] || [errorcode isEqualToString:ERROR_NOT_NET])\n";
		m+="        \n";
		m+="    {\n";
		m+="        \n";
		m+="        \n";
		m+="    }\n";
		m+="    \n";
		m+="    \n";
		m+="    MsgReturn *msgReturn=[[MsgReturn alloc ] init ];\n";
		m+="    msgReturn.errorCode=@\"D001\";\n";
		m+="    msgReturn.errorDesc=errortxt;\n";
		m+="    msgReturn.formName=self.formName;\n";
		m+="    [delegate serviceInvokerError:msgReturn];\n";
		m+="    \n";
		m+="    \n";
		m+="    NSLog(@\"错误:%@ %@\",errortxt,self.formName);\n";
		m+="}\n";

		m+="int  errorCountFlag=0;\n";

		m+="//业务请求返回数据\n";
		m+="-(void)netServiceReturnData:(NSDictionary*)rtn\n";
		m+="{\n";
		m+="    RSAUtil *rsaUtil = [RSAUtil shareInstance];\n";
		m+="    \n";
		m+="    if (rtn==NULL) {\n";
		m+="        \n";
		m+="    } else {\n";
		m+="        NSString *returnDataStr=[rtn objectForKey:@\"return\"];\n";
		m+="        if(returnDataStr ==NULL)\n";
		m+="        {\n";
		m+="            \n";
		m+="            MsgReturn *msgReturn=[[MsgReturn alloc ] init ];\n";
		m+="            msgReturn.errorCode=@\"D001\";\n";
		m+="            msgReturn.errorDesc=@\"网络错误\";\n";
		m+="            msgReturn.formName=@\"\";\n";
		m+="            [delegate serviceInvokerError:msgReturn];\n";
		m+="            \n";
		m+="            return;\n";
		m+="        }\n";
		m+="        NSString *formname=[rtn objectForKey:@\"formName\"];\n";
		m+="        NSString *tempString1=[self stringWithoutESCCharater:returnDataStr];\n";
		m+="        NSDictionary *returnDataDic = [self jsonString2Dic:[tempString1 dataUsingEncoding:NSUTF8StringEncoding] ];\n";
		m+="        \n";
		m+="        \n";
		m+="        \n";
		m+="        NSString *err_code = [returnDataDic objectForKey:@\"err_code\"];\n";
		m+="        NSString *err_msg =  [returnDataDic objectForKey:@\"err_msg\"];\n";
		m+="        \n";
		m+="        \n";
		m+="        \n";
		m+="        \n";
		m+="        if([formname isEqualToString:@\"rsaPublicKey\"])\n";
		m+="        {//取服务器公钥\n";
		m+="            \n";
		m+="            if ([err_code isEqualToString:ERROR_SUCCESS]) {\n";
		m+="                \n";
		m+="                NSString *param = [returnDataDic objectForKey:@\"param\"];\n";
		m+="                \n";
		m+="                if(param==NULL)\n";
		m+="                    return;\n";
		m+="                \n";
		m+="                NSDictionary *paramdic=[self jsonString2Dic:[param base64DecodedData] ];\n";
		m+="                \n";
		m+="                NSString *publicKeyStringX509Server = [paramdic objectForKey:@\"f\"];//公钥public_key\n";
		m+="                \n";
		m+="                if(publicKeyStringX509Server==nil ||[publicKeyStringX509Server isEqualToString:@\"\"])\n";
		m+="                {\n";
		m+="                    return;\n";
		m+="                }\n";
		m+="                \n";
		m+="                NSString *publicKeyStringX509ServerVer = [paramdic objectForKey:@\"b\"];//公钥版本号\n";
		m+="                \n";
		m+="                  NSString *public_key_flag = [paramdic objectForKey:@\"g\"];//加密标志  0加密 1不加密 public_key_flag\n";
		m+="                \n";
		m+="                NSString *public_key_string = [paramdic objectForKey:@\"c\"];//公钥加密对应的秘钥串public_key_string\n";
		m+="                \n";
		m+="                EncryptAlgorithms *encryptAlgorithms=[[EncryptAlgorithms alloc ] init ];\n";
		m+="               \n";
		m+="                if ([public_key_flag isEqualToString:@\"0\"]) {\n";
		m+="                    [encryptAlgorithms init:public_key_string];\n";
		m+="                    publicKeyStringX509Server= [encryptAlgorithms Decrypt:publicKeyStringX509Server];\n";
		m+="                }\n";
		m+="                \n";
		m+="                \n";
		m+="                \n";
		m+="                NSUserDefaults *userDefault=[NSUserDefaults standardUserDefaults];\n";
		m+="                [userDefault setObject:publicKeyStringX509Server forKey:@\"publicKeyStringX509Server\"];\n";
		m+="                [userDefault setObject:publicKeyStringX509ServerVer forKey:@\"publicKeyStringX509ServerVer\"];\n";
		m+="                [userDefault synchronize];\n";
		m+="                \n";
		m+="                \n";
		m+="                [self appSignIn ];\n";
		m+="            }else\n";
		m+="            {\n";
		m+="            \n";
		m+="                MsgReturn *msgReturn=[[MsgReturn alloc ] init ];\n";
		m+="                msgReturn.errorCode=err_code;\n";
		m+="                msgReturn.errorDesc=err_msg;\n";
		m+="                msgReturn.formName=@\"rsaPublicKey\";\n";
		m+="                [delegate serviceInvokerError:msgReturn];\n";
		m+="            \n";
		m+="            }\n";
		m+="            \n";
		m+="            \n";
		m+="        }\n";
		m+="        \n";
		m+="        \n";
		m+="        \n";
		m+="        else if([formname isEqualToString:@\"appSignIn\"])\n";
		m+="        {//签到\n";
		m+="            if ([err_code isEqualToString:ERROR_SUCCESS]) {\n";
		m+="                \n";
		m+="                \n";
		m+="                NSString *param = [returnDataDic objectForKey:@\"param\"];\n";
		m+="                \n";
		m+="                if(param==NULL)\n";
		m+="                    return;\n";
		m+="                \n";
		m+="                \n";
		m+="                \n";
		m+="                NSUserDefaults *userDefault=[NSUserDefaults standardUserDefaults];\n";
		m+="                \n";
		m+="                \n";
		m+="                NSString *privateKeyStringPKCS1= [userDefault objectForKey:@\"privateKeyStringPKCS1\"];\n";
		m+="                \n";
		m+="                RSAUtil *rsaUtil = [RSAUtil shareInstance];\n";
		m+="                //Rsa只含私钥对象\n";
		m+="                RSA *privateRSA= [rsaUtil string2Privatekey:privateKeyStringPKCS1 ];\n";
		m+="                \n";
		m+="                \n";
		m+="                \n";
		m+="                NSData *edata=[param base64DecodedData];\n";
		m+="                \n";
		m+="                \n";
		m+="                NSString *decryptString = [rsaUtil decryptLongString:KeyTypePrivate rsa:privateRSA paddingType:RSA_PADDING_TYPE_PKCS1 encryptText:edata usingEncoding:NSUTF8StringEncoding];\n";
		m+="                \n";
		m+="                NSUserDefaults *userdefalut=[NSUserDefaults standardUserDefaults];\n";
		m+="                if(decryptString==NULL)\n";
		m+="                {\n";
		m+="                    //解密失败\n";
		m+="                    [userdefalut setObject:ERROR_SINGIN_ERROR forKey:@\"errorCode\"];\n";
		m+="                    [userdefalut setObject:SINGIN_ERROR forKey:@\"errorTxt\"];\n";
		m+="                    [userdefalut synchronize];\n";
		m+="                    \n";
		m+="                    //签到失败 回调\n";
		m+="                    MsgReturn *msgReturn=[[MsgReturn alloc ] init ];\n";
		m+="                    msgReturn.errorCode=ERROR_SINGIN_ERROR;\n";
		m+="                    msgReturn.errorDesc=SINGIN_ERROR;\n";
		m+="                    msgReturn.formName=@\"appSignIn\";\n";
		m+="                    [delegate serviceInvokerError:msgReturn];\n";
		m+="                    return;\n";
		m+="                }\n";
		m+="                NSDictionary *paramdic=[self jsonString2Dic:[decryptString dataUsingEncoding:NSUTF8StringEncoding] ];\n";
		m+="                \n";
		m+="                \n";
		m+="                NSString *logicId= [paramdic objectForKey:@\"logicId\"];\n";
		m+="                [userdefalut setObject:logicId forKey:@\"logicId\"];\n";
		m+="                \n";
		m+="                [userdefalut synchronize];\n";
		m+="                \n";
		m+="                mMsgSeqNo=1;\n";
		m+="                //签到成功 回调\n";
		m+="                MsgReturn *msgReturn=[[MsgReturn alloc ] init ];\n";
		m+="                msgReturn.errorCode=ERROR_SUCCESS;\n";
		m+="                msgReturn.errorDesc=ERROR_TEXT_SUCCESS;\n";
		m+="                msgReturn.formName=@\"appSignIn\";\n";
		m+="                [delegate serviceInvokerReturnData:msgReturn];\n";
		m+="                \n";
		m+="                \n";
		m+="                \n";
		m+="                if([willDo isEqualToString:@\"callWebservice\"])\n";
		m+="                {\n";
		m+="                    [self callWebservice:cachebusinessParameter formName:self.callServiceFormName ];\n";
		m+="                    \n";
		m+="                    willDo=@\"\";\n";
		m+="                }\n";
		m+="                \n";
		m+="                errorCountFlag=0;\n";
		m+="            }\n";
		m+="            \n";
		m+="            \n";
		m+="            \n";
		m+="            if ([err_code  isEqualToString:WG1007 ]\n";
		m+="                || [err_code isEqualToString:WG2002]\n";
		m+="                || [err_code isEqualToString:WG2003]\n";
		m+="                || [err_code isEqualToString:WG2004]\n";
		m+="                ) {\n";
		m+="                errorCountFlag++;\n";
		m+="                \n";
		m+="                \n";
		m+="                if ([err_code isEqualToString:WG1007] ) {\n";
		m+="                    // 如果为“wg1007 设备逻辑号不存在”，则置mLogicID为空\n";
		m+="                    \n";
		m+="                    NSUserDefaults *userdefalut=[NSUserDefaults standardUserDefaults];\n";
		m+="                    [userdefalut setObject:@\"\" forKey:@\"logicId\"];\n";
		m+="                    [userdefalut synchronize];\n";
		m+="                    \n";
		m+="                }\n";
		m+="                \n";
		m+="                // 签到错误次数最多循环执行3次，超过3次仍然错误则当签到失败处理；\n";
		m+="                if (errorCountFlag > 3) {\n";
		m+="                    errorCountFlag = 0;\n";
		m+="                    \n";
		m+="                    NSUserDefaults *userdefalut=[NSUserDefaults standardUserDefaults];\n";
		m+="                    [userdefalut setObject:ERROR_SINGIN_ERROR forKey:@\"errorCode\"];\n";
		m+="                    [userdefalut setObject:SINGIN_ERROR forKey:@\"errorTxt\"];\n";
		m+="                    [userdefalut synchronize];\n";
		m+="                    \n";
		m+="                    //签到失败 回调\n";
		m+="                    MsgReturn *msgReturn=[[MsgReturn alloc ] init ];\n";
		m+="                    msgReturn.errorCode=err_code;\n";
		m+="                    msgReturn.errorDesc=err_msg;\n";
		m+="                    msgReturn.formName=@\"appSignIn\";\n";
		m+="                    [delegate serviceInvokerError:msgReturn];\n";
		m+="                    willDo=@\"\";\n";
		m+="                    \n";
		m+="                } else {\n";
		m+="                    //重新 获取服务器公钥 签到\n";
		m+="                    NSUserDefaults *userdefalut=[NSUserDefaults standardUserDefaults];\n";
		m+="                    NSString *appID=[userdefalut objectForKey:@\"appId\"];\n";
		m+="                    NSString *appVersion=[userdefalut objectForKey:@\"appVer\"];\n";
		m+="                    \n";
		m+="                    [self appSignIn:appID appVersion:appVersion ];\n";
		m+="                    \n";
		m+="                    \n";
		m+="                }\n";
		m+="                \n";
		m+="            }\n";
		m+="        }\n";
		m+="        \n";
		m+="        else if([formname isEqualToString:@\"messageIdReset\"])\n";
		m+="        {//报文流水重置\n";
		m+="            \n";
		m+="            if ([err_code isEqualToString:ERROR_SUCCESS]) {\n";
		m+="                \n";
		m+="                \n";
		m+="                \n";
		m+="                //重置成功再发次交易请求\n";
		m+="                \n";
		m+="                if([willDo isEqualToString:@\"callWebService\"])\n";
		m+="                {\n";
		m+="                    \n";
		m+="                    [self callWebservice:cachebusinessParameter formName:self.callServiceFormName ];\n";
		m+="                    willDo=@\"\";\n";
		m+="                    \n";
		m+="                }\n";
		m+="                \n";
		m+="            }\n";
		m+="            \n";
		m+="            \n";
		m+="            // 如果err_code为“wg2002 密钥版本号比较失败”或者“2003 报文解密失败”，则需要重新获取无线网关公钥；\n";
		m+="            if ([err_code  isEqualToString:WG2002 ]\n";
		m+="                || [err_code isEqualToString:WG2004]\n";
		m+="                || [err_code isEqualToString:WG2003]\n";
		m+="                ) {\n";
		m+="                \n";
		m+="                NSUserDefaults *userDefault=[NSUserDefaults standardUserDefaults];\n";
		m+="                [userDefault setObject:@\"\" forKey:@\"publicKeyStringX509Server\"];\n";
		m+="                [userDefault setObject:@\"\" forKey:@\"publicKeyStringX509ServerVer\"];\n";
		m+="                [userDefault synchronize];\n";
		m+="                \n";
		m+="                //重新 获取服务器公钥 签到\n";
		m+="                NSUserDefaults *userdefalut=[NSUserDefaults standardUserDefaults];\n";
		m+="                NSString *appID=[userdefalut objectForKey:@\"appId\"];\n";
		m+="                NSString *appVersion=[userdefalut objectForKey:@\"appVer\"];\n";
		m+="                \n";
		m+="                [self appSignIn:appID appVersion:appVersion ];\n";
		m+="                \n";
		m+="                willDo=@\"callWebService\";\n";
		m+="                \n";
		m+="            }\n";
		m+="        }else if([formname isEqualToString:@\"checkUpdates\"])\n";
		m+="        {\n";
		m+="            \n";
		m+="            NSLog(@\"checkupdates respond :%@\",returnDataDic);\n";
		m+="            \n";
		m+="            BOOL success = [returnDataDic objectForKey:@\"success\"];\n";
		m+="            NSDictionary *datadic = [returnDataDic objectForKey:@\"data\"];\n";
		m+="            if(success!=NULL && success && datadic!=NULL)\n";
		m+="            {\n";
		m+="                \n";
		m+="                NSString *appConfigVersion = [datadic objectForKey:@\"appConfigVersion\"];//配置文件版本号\n";
		m+="                \n";
		m+="                NSString *appUrl = [datadic objectForKey:@\"appUrl\"];//app下载地址\n";
		m+="                \n";
		m+="                NSString *serverAppVersion = [datadic objectForKey:@\"appVersion\"];//app版本号\n";
		m+="                NSString *configPath = [datadic objectForKey:@\"configPath\"];//配置文件路径\n";
		m+="                \n";
		m+="                NSString *deviceStatus = [datadic objectForKey:@\"deviceStatus\"];\n";
		m+="                \n";
		m+="                BOOL forceUpdate  = [datadic objectForKey:@\"oldVersionEnable\"];\n";
		m+="                NSString *loginStatus = [datadic objectForKey:@\"loginStatus\"];\n";
		m+="                NSString *singleLoginApp = [datadic objectForKey:@\"singleLoginApp\"];\n";
		m+="                \n";
		m+="                NSString *configUrl = [datadic objectForKey:@\"configUrl\"];\n";
		m+="                \n";
		m+="                \n";
		m+="                \n";
		m+="                \n";
		m+="                Sql *sql=[[Sql alloc ]init];\n";
		m+="                \n";
		m+="                NSString *oldConfigFileVersion=[sql selectPM_SIGNSERVICE_CONFIGVERSION];\n";
		m+="                \n";
		m+="                if(oldConfigFileVersion==nil || [oldConfigFileVersion isEqualToString:@\"\"])\n";
		m+="                {\n";
		m+="                    //配置文件不存在\n";
		m+="                    if(  configPath && configUrl && [configUrl hasPrefix:@\"http\"]\n";
		m+="                       ){\n";
		m+="                        \n";
		m+="                        \n";
		m+="                        \n";
		m+="                        BOOL downloadAndZipOk= [self downloadFileAndUNZip:configUrl configPath:configPath];\n";
		m+="                        if(downloadAndZipOk)\n";
		m+="                        {\n";
		m+="                            NSLog(@\"%@\",@\"配置文件更新成功\");\n";
		m+="                            \n";
		m+="                            //交易成功  回调\n";
		m+="                            MsgReturn *msgReturn=[[MsgReturn alloc ] init ];\n";
		m+="                            msgReturn.errorCode=ERROR_SUCCESS;\n";
		m+="                            msgReturn.errorDesc=@\"版本检查成功\";\n";
		m+="                            msgReturn.formName=@\"checkUpdates\";\n";
		m+="                            msgReturn.map=datadic;\n";
		m+="                        \n";
		m+="                            [delegate serviceInvokerReturnData:msgReturn];\n";
		m+="                        }else\n";
		m+="                        {\n";
		m+="                            \n";
		m+="                            //交易失败  回调\n";
		m+="                            MsgReturn *msgReturn=[[MsgReturn alloc ] init ];\n";
		m+="                            msgReturn.errorCode=ERROR_FAILED;\n";
		m+="                            msgReturn.errorDesc=@\"配置文件获取失败\";\n";
		m+="                            msgReturn.formName=@\"checkUpdates\";\n";
		m+="                            \n";
		m+="                            [delegate serviceInvokerError:msgReturn];\n";
		m+="                        }\n";
		m+="                        \n";
		m+="                        \n";
		m+="                    }else\n";
		m+="                    {\n";
		m+="                        \n";
		m+="                        //交易失败  回调\n";
		m+="                        MsgReturn *msgReturn=[[MsgReturn alloc ] init ];\n";
		m+="                        msgReturn.errorCode=ERROR_FAILED;\n";
		m+="                        msgReturn.errorDesc=@\"配置文件获取失败\";\n";
		m+="                        msgReturn.formName=@\"checkUpdates\";\n";
		m+="                        \n";
		m+="                        [delegate serviceInvokerError:msgReturn];\n";
		m+="                        \n";
		m+="                    }\n";
		m+="                    \n";
		m+="                    \n";
		m+="                }else\n";
		m+="                {\n";
		m+="                    //配置文件已存在\n";
		m+="                    \n";
		m+="                    \n";
		m+="                    if(  configPath && configUrl && [configUrl hasPrefix:@\"http\"] &&  ![oldConfigFileVersion isEqualToString:appConfigVersion]\n";
		m+="                       ){\n";
		m+="                        \n";
		m+="                        BOOL downloadAndZipOk= [self downloadFileAndUNZip:configUrl configPath:configPath];\n";
		m+="                        if(downloadAndZipOk)\n";
		m+="                        {\n";
		m+="                            NSLog(@\"%@\",@\"配置文件更新成功\");\n";
		m+="                            //交易成功  回调\n";
		m+="                            MsgReturn *msgReturn=[[MsgReturn alloc ] init ];\n";
		m+="                            msgReturn.errorCode=ERROR_SUCCESS;\n";
		m+="                            msgReturn.errorDesc=@\"版本检查成功\";\n";
		m+="                            msgReturn.formName=@\"checkUpdates\";\n";
		m+="                            msgReturn.map=datadic;\n";
		m+="                            [delegate serviceInvokerReturnData:msgReturn];\n";
		m+="                        }else\n";
		m+="                        {\n";
		m+="                            NSLog(@\"%@\",@\"配置文件更新失败\");\n";
		m+="                            //交易失败  回调\n";
		m+="                            MsgReturn *msgReturn=[[MsgReturn alloc ] init ];\n";
		m+="                            msgReturn.errorCode=ERROR_FAILED;\n";
		m+="                            msgReturn.errorDesc=@\"配置文件获取失败\";\n";
		m+="                            msgReturn.formName=@\"checkUpdates\";\n";
		m+="                            \n";
		m+="                            [delegate serviceInvokerError:msgReturn];\n";
		m+="                        }\n";
		m+="                        \n";
		m+="                      \n";
		m+="                        \n";
		m+="                    }else\n";
		m+="                    {\n";
		m+="                        \n";
		m+="                        //交易成功  回调\n";
		m+="                        MsgReturn *msgReturn=[[MsgReturn alloc ] init ];\n";
		m+="                        msgReturn.errorCode=ERROR_SUCCESS;\n";
		m+="                        msgReturn.errorDesc=@\"版本检查成功\";\n";
		m+="                        msgReturn.formName=@\"checkUpdates\";\n";
		m+="                        msgReturn.map=datadic;\n";
		m+="                        [delegate serviceInvokerReturnData:msgReturn];\n";
		m+="                    }\n";
		m+="                    //  }\n";
		m+="                    \n";
		m+="                    \n";
		m+="                    \n";
		m+="                    \n";
		m+="                }\n";
		m+="                \n";
		m+="                \n";
		m+="            }}\n";
		m+="        else{//调用交易\n";
		m+="            \n";
		m+="            \n";
		m+="            if ([err_code isEqualToString:ERROR_SUCCESS]) {\n";
		m+="                \n";
		m+="                NSString *param = [returnDataDic objectForKey:@\"param\"];\n";
		m+="                if([param isKindOfClass:[NSNull class]]?true:false)\n";
		m+="                {\n";
		m+="                   return;\n";
		m+="                }\n";
		m+="                \n";
		m+="                NSUserDefaults *userDefault=[NSUserDefaults standardUserDefaults];\n";
		m+="                \n";
		m+="                NSString *privateKeyStringPKCS1= [userDefault objectForKey:@\"privateKeyStringPKCS1\"];\n";
		m+="                \n";
		m+="                RSA *privateRSA= [rsaUtil string2Privatekey:privateKeyStringPKCS1 ];\n";
		m+="                \n";
		m+="                \n";
		m+="                NSData *edata=[param base64DecodedData];\n";
		m+="                \n";
		m+="                \n";
		m+="                NSString *decryptStringBase64 = [rsaUtil decryptLongString:KeyTypePrivate rsa:privateRSA paddingType:RSA_PADDING_TYPE_PKCS1 encryptText:edata usingEncoding:NSUTF8StringEncoding];\n";
		m+="                \n";
		m+="                \n";
		m+="                NSStringEncoding gbkEncoding =CFStringConvertEncodingToNSStringEncoding(kCFStringEncodingGB_18030_2000);\n";
		m+="                NSMutableString*decryptString = [[NSMutableString alloc] initWithData:[decryptStringBase64 base64DecodedData] encoding:gbkEncoding];\n";
		m+="                \n";
		m+="                \n";
		m+="                 NSLog(@\"\n respond %@ :%@\n\",self.formName,decryptString);\n";
		m+="                \n";
		m+="                if( decryptString!=nil && ![decryptString isKindOfClass:[NSNull class]]&& [decryptString rangeOfString:@\"null\"].location !=NSNotFound)\n";
		m+="                {\n";
		m+="                    MsgReturn *msgReturn=[[MsgReturn alloc ] init ];\n";
		m+="                    msgReturn.errorCode=@\"-8888\";\n";
		m+="                    msgReturn.errorDesc=[NSString  stringWithFormat:@\"%@ %@\",self.formName,@\"null\"] ;\n";
		m+="                    msgReturn.formName=self.formName;\n";
		m+="                    \n";
		m+="                    \n";
		m+="                    [delegate serviceInvokerReturnData:msgReturn];\n";
		m+="                    \n";
		m+="                    return;\n";
		m+="                }\n";

		m+="                \n";
		m+="               \n";
		m+="                \n";
		m+="                \n";
		m+="                NSDictionary *paramdic=[self jsonString2Dic:[decryptString dataUsingEncoding:NSUTF8StringEncoding] ];\n";
		m+="                \n";
		m+="                NSString *tokenType= [paramdic objectForKey:@\"tokenType\"];\n";
		m+="                \n";
		m+="                NSString *token= [paramdic objectForKey:@\"token\"];\n";
		m+="                \n";
		m+="                NSMutableString *businessParam= [paramdic objectForKey:@\"businessParam\"];\n";
		m+="                \n";
		m+="                if(businessParam==nil)\n";
		m+="                {//解密失败\n";
		m+="                    if(errorCountFlag==0)\n";
		m+="                    {\n";
		m+="                        //重新 1获取服务器公钥  2签到\n";
		m+="                        \n";
		m+="                        \n";
		m+="                        NSUserDefaults *userdefalut=[NSUserDefaults standardUserDefaults];\n";
		m+="                        NSString *appID=[userdefalut objectForKey:@\"appId\"];\n";
		m+="                        NSString *appVersion=[userdefalut objectForKey:@\"appVer\"];\n";
		m+="                        \n";
		m+="                        [self appSignIn:appID appVersion:appVersion ];\n";
		m+="                        self.willDo=@\"callWebService\";//签到成功后重发调用交易\n";
		m+="                        \n";
		m+="                        errorCountFlag ++;\n";
		m+="                        return;\n";
		m+="                    }else\n";
		m+="                    {\n";
		m+="                        errorCountFlag=0;\n";
		m+="                        //重置失败 回调\n";
		m+="                        MsgReturn *msgReturn=[[MsgReturn alloc ] init ];\n";
		m+="                        msgReturn.errorCode=ERROR_RSA_ERROR;\n";
		m+="                        msgReturn.errorDesc=ERROR_TEXT_RSA;\n";
		m+="                        msgReturn.formName=formName;\n";
		m+="                        [delegate serviceInvokerError:msgReturn];\n";
		m+="                        willDo=@\"\";\n";
		m+="                        \n";
		m+="                        \n";
		m+="                    }\n";
		m+="                }\n";
		m+="                errorCountFlag=0;\n";
		m+="                \n";
		m+="                [userDefault setObject:tokenType forKey:@\"tokenType\"];\n";
		m+="                [userDefault setObject:token forKey:@\"token\"];\n";
		m+="                [userDefault synchronize];\n";
		m+="                \n";
		m+="                //交易成功  回调\n";
		m+="                MsgReturn *msgReturn=[[MsgReturn alloc ] init ];\n";
		m+="                msgReturn.errorCode=ERROR_SUCCESS;\n";
		m+="                msgReturn.errorDesc=ERROR_TEXT_SUCCESS;\n";
		m+="                msgReturn.formName=self.formName;\n";
		m+="                msgReturn.map=paramdic;\n";
		m+="                [delegate serviceInvokerReturnData:msgReturn];\n";
		m+="                \n";
		m+="            }\n";
		m+="            else\n";
		m+="            {\n";
		m+="                \n";
		m+="                \n";
		m+="                \n";
		m+="                \n";
		m+="                if ([err_code  isEqualToString:WG1002 ]\n";
		m+="                    || [err_code isEqualToString:WG1004]) {\n";
		m+="                    NSLog(@\"%@\",err_msg);\n";
		m+="                    // 报文流水重置\n";
		m+="                    [self messageIdReset];\n";
		m+="                    //报文流水重置后重发交易\n";
		m+="                    self.willDo=@\"callWebService\";\n";
		m+="                    \n";
		m+="                }else if ([err_code  isEqualToString:WG1007]\n";
		m+="                          ||[err_code  isEqualToString:WG2002]\n";
		m+="                          ||[err_code  isEqualToString:WG2004]\n";
		m+="                          ||[err_code  isEqualToString:WG2003]) {\n";
		m+="                    \n";
		m+="                    \n";
		m+="                    if ([err_code  isEqualToString:WG1007]) {\n";
		m+="                        // 如果为“wg1007 设备逻辑号不存在”，则置mLogicID为空\n";
		m+="                        NSUserDefaults *userdefalut=[NSUserDefaults standardUserDefaults];\n";
		m+="                        [userdefalut setObject:@\"\" forKey:@\"logicId\"];\n";
		m+="                        [userdefalut synchronize];\n";
		m+="                        \n";
		m+="                    }\n";
		m+="                    \n";
		m+="                    \n";
		m+="                    //重新 1获取服务器公钥  2签到\n";
		m+="                    \n";
		m+="                    NSUserDefaults *userdefalut=[NSUserDefaults standardUserDefaults];\n";
		m+="                    NSString *appID=[userdefalut objectForKey:@\"appId\"];\n";
		m+="                    NSString *appVersion=[userdefalut objectForKey:@\"appVer\"];\n";
		m+="                    \n";
		m+="                    [self appSignIn:appID appVersion:appVersion ];\n";
		m+="                    self.willDo=@\"callWebService\";//签到成功后重发调用交易\n";
		m+="                    \n";
		m+="                    \n";
		m+="                    \n";
		m+="                    \n";
		m+="                }else\n";
		m+="                {\n";
		m+="                    //交易失败  回调\n";
		m+="                    MsgReturn *msgReturn=[[MsgReturn alloc ] init ];\n";
		m+="                    msgReturn.errorCode=err_code;\n";
		m+="                    msgReturn.errorDesc=err_msg;\n";
		m+="                    msgReturn.formName=self.formName;\n";
		m+="                    \n";
		m+="                    \n";
		m+="                    [delegate serviceInvokerReturnData:msgReturn];\n";
		m+="                    \n";
		m+="                    \n";
		m+="                    \n";
		m+="                    NSLog(@\"%@\",err_msg);\n";
		m+="                }}\n";
		m+="        }\n";
		m+="        \n";
		m+="    }\n";
		m+="    \n";
		m+="    \n";
		m+="}\n";



		m+="//向后台发送的完整报文,debug用\n";
		m+="-(void)metaMsgSentToServer:(NSString*)jsonStr\n";
		m+="{\n";
		m+="    \n";
		m+="}\n";

		m+="//从后台返回的完整报文,debug用\n";
		m+="-(void)metaMsgReceivedFromServer:(id)response\n";
		m+="{\n";
		m+="    \n";
		m+="}\n";


		m+="-(BOOL)downloadFileAndUNZip:(NSString*) urlAsString configPath:(NSString*)configPath\n";
		m+="{\n";
		m+="    \n";
		m+="    NSString *path = [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];\n";
		m+="    \n";
		m+="    \n";
		m+="    path = [path stringByAppendingPathComponent:@\"securedDirectory\"];\n";
		m+="    \n";
		m+="    NSFileManager *fileManager = [NSFileManager defaultManager];\n";
		m+="    \n";
		m+="    if (![fileManager fileExistsAtPath:path]){\n";
		m+="        if ([fileManager createDirectoryAtPath:path\n";
		m+="                   withIntermediateDirectories:YES\n";
		m+="                                    attributes:nil\n";
		m+="                                         error:nil]==NO){\n";
		m+="            //prevend iClound or iTunes to backup this dire, work on 5.0.1 and later\n";
		m+="            [self skipBackupAttributetoDir:path];\n";
		m+="        }\n";
		m+="    }\n";
		m+="    \n";
		m+="    \n";
		m+="    NSString *localConfigPath = [path stringByAppendingPathComponent:configPath];\n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="    NSURL    *url = [NSURL URLWithString:urlAsString];\n";
		m+="    NSURLRequest *request = [NSURLRequest requestWithURL:url cachePolicy:NSURLRequestReloadIgnoringLocalCacheData timeoutInterval:TIMEOUT/1000];\n";
		m+="    NSError *error = nil;\n";
		m+="    NSData   *data =[NSURLConnection sendSynchronousRequest:request returningResponse:nil error:&error];\n";
		m+="    \n";
		m+="    \n";
		m+="    /* 下载的数据 */\n";
		m+="    if (data != nil){\n";
		m+="        NSLog(@\"下载成功\");\n";
		m+="        if ([data writeToFile:localConfigPath atomically:YES]) {\n";
		m+="            NSLog(@\"保存成功.%@\",localConfigPath);\n";
		m+="            \n";
		m+="            BOOL isUNZip=[self expandNormalZipFile:localConfigPath];\n";
		m+="            \n";
		m+="            if(isUNZip)\n";
		m+="            {\n";
		m+="                return YES;}\n";
		m+="            else{\n";
		m+="                return NO;\n";
		m+="            }\n";
		m+="        }\n";
		m+="        else\n";
		m+="        {\n";
		m+="            NSLog(@\"保存失败.\");\n";
		m+="            return NO;\n";
		m+="        }\n";
		m+="    } else {\n";
		m+="        NSLog(@\"%@\", error);\n";
		m+="    }\n";
		m+="    \n";
		m+="    return NO;\n";
		m+="    \n";
		m+="}\n";

		m+="- (BOOL) expandNormalZipFile:(NSString*)_zipFile\n";
		m+="{\n";
		m+="    NSRange range = [_zipFile rangeOfString:@\"/\" options:NSBackwardsSearch];\n";
		m+="    \n";
		m+="    NSString * outputDir=[_zipFile substringToIndex:range.location+1];\n";
		m+="    \n";
		m+="    \n";
		m+="    NSFileManager *fm = [NSFileManager defaultManager];\n";
		m+="    \n";
		m+="    // unzip normal zip\n";
		m+="    NSUInteger count = 0;\n";
		m+="    \n";
		m+="    ZipArchive* zip = [[ZipArchive alloc] init];\n";
		m+="    [zip UnzipOpenFile:_zipFile];\n";
		m+="    // NSArray* contents = [zip getZipFileContents];\n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="    [zip UnzipFileTo:outputDir overWrite:YES];\n";
		m+="    \n";
		m+="    NSDirectoryEnumerator* dirEnum = [fm enumeratorAtPath:outputDir];\n";
		m+="    NSString* file;\n";
		m+="    NSError* error = nil;\n";
		m+="    BOOL isAllZipOk=NO;\n";
		m+="    \n";
		m+="    while ((file = [dirEnum nextObject])) {\n";
		m+="        count += 1;\n";
		m+="        \n";
		m+="        NSString* fullPath = [outputDir stringByAppendingPathComponent:file];\n";
		m+="        NSDictionary* attrs = [fm attributesOfItemAtPath:fullPath error:&error];\n";
		m+="        if ([attrs fileSize] > 0)\n";
		m+="        {\n";
		m+="            //@\"file is not zero length\n";
		m+="            isAllZipOk=YES;\n";
		m+="        }else\n";
		m+="        {\n";
		m+="            isAllZipOk=NO;\n";
		m+="        }\n";
		m+="        \n";
		m+="    }\n";
		m+="    \n";
		m+="    if(isAllZipOk)\n";
		m+="    {\n";
		m+="        NSUserDefaults *userDefault=[NSUserDefaults standardUserDefaults];\n";
		m+="        [userDefault setObject:outputDir forKey:@\"localConfigFilePath\"];\n";
		m+="        \n";
		m+="        [userDefault synchronize];\n";
		m+="        return YES;\n";
		m+="    }\n";
		m+="    //@\"files extracted successfully\n";
		m+="    return  NO;\n";
		m+="}\n";


		m+="//prevend iClound or iTunes to backup this dire, work on 5.0.1 and later\n";
		m+="-(BOOL)skipBackupAttributetoDir:(NSString *)path{\n";
		m+="    NSURL *url = [NSURL fileURLWithPath:path];\n";
		m+="    if(IOS51){\n";
		m+="        NSError *error = nil;\n";
		m+="        BOOL success = [url setResourceValue: [NSNumber numberWithBool: YES]\n";
		m+="                                      forKey: NSURLIsExcludedFromBackupKey error: &error];\n";
		m+="        if(!success){\n";
		m+="            NSLog(@\"Error excluding %@ from backup %@\", [url lastPathComponent], error);\n";
		m+="        }\n";
		m+="        return success;\n";
		m+="    }else if(IOS501){\n";
		m+="        const char* filePath = [[url path] fileSystemRepresentation];\n";
		m+="        \n";
		m+="        const char* attrName = \"com.apple.MobileBackup\";\n";
		m+="        u_int8_t attrValue = 1;\n";
		m+="        \n";
		m+="        int result = setxattr(filePath, attrName, &attrValue, sizeof(attrValue), 0, 0);\n";
		m+="        return result == 0;\n";
		m+="    }\n";
		m+="}\n";


		m+="-(NSString*)dic2jsonString:(id)object\n";
		m+="{\n";
		m+="    NSString *jsonString = nil;\n";
		m+="    NSError *error;\n";
		m+="    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:object\n";
		m+="                                                       options:NSJSONWritingPrettyPrinted // Pass 0 if you don't care about the readability of the generated string\n";
		m+="                                                         error:&error];\n";
		m+="    if (! jsonData) {\n";
		m+="        NSLog(@\"Got an error: %@\", error);\n";
		m+="    } else {\n";
		m+="        jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];\n";
		m+="    }\n";
		m+="    return jsonString;\n";
		m+="}\n";


		m+="// 将JSON串转化为字典或者数组\n";
		m+="- (id)jsonString2Dic:(NSDate *)jsonData{\n";
		m+="    \n";
		m+="    //  NSData *jsonData=[jsonString dataUsingEncoding:NSUTF8StringEncoding];\n";
		m+="    \n";
		m+="    NSError *error = nil;\n";
		m+="    id jsonObject = [NSJSONSerialization JSONObjectWithData:jsonData\n";
		m+="                                                    options:NSJSONReadingAllowFragments\n";
		m+="                                                      error:&error];\n";
		m+="    \n";
		m+="    if (jsonObject != nil && error== nil){\n";
		m+="        return jsonObject;\n";
		m+="    }else{\n";
		m+="        // 解析错误\n";
		m+="        return nil;\n";
		m+="    }\n";
		m+="    \n";
		m+="}\n";


		m+="-(void)callUpdateDelegate{\n";
		m+="    \n";
		m+="    \n";
		m+="    \n";
		m+="}\n";



		m+="//实现一个创建单例对象的类方法\n";

		m+="static ServiceInvoker *objName = nil;\n";

		m+="+ (ServiceInvoker *) sharedInstance{\n";
		m+="    static dispatch_once_t oneToken = 0;\n";
		m+="    dispatch_once(&oneToken, ^{\n";
		m+="        objName = [[super allocWithZone: NULL] init];\n";
		m+="    });\n";
		m+="    return objName;\n";
		m+="}\n";

		m+="//重写几个方法，防止创建单例对象时出现错误\n";
		m+="-(id) init{\n";
		m+="    if(self = [super init])\n";
		m+="    {\n";
		m+="        //初始化单例对象的各种属性\n";
		m+="    }\n";
		m+="    return self;\n";
		m+="}\n";

		m+="+(id)allocWithZone: (struct _NSZone *) zone{\n";
		m+="    return [self sharedInstance];\n";
		m+="}\n";

		m+="//这是单例对象遵循<NSCopying>协议时需要实现的方法\n";
		m+="-(id) copyWithZone: (struct _NSZone *)zone{\n";
		m+="    return self;\n";
		m+="}\n";


		m+="-(NSString*)stringWithoutESCCharater:(NSString*)str{\n";
		m+="    if (str==nil) {\n";
		m+="        return nil;\n";
		m+="    }\n";
		m+="    str=[str stringByReplacingOccurrencesOfString:@\"\\\\"\" withString:@\"\\"\"];\n";
		m+="    str=[str stringByReplacingOccurrencesOfString:@\"\\"{\" withString:@\"{\"];\n";
		m+="    str=[str stringByReplacingOccurrencesOfString:@\"}\\"\" withString:@\"}\"];\n";
		m+="    return str;\n";
		m+="}\n";




		m+="+(void) changeShowErrorMsg:(MsgReturn*)errorMsg title:(NSString*)title viewController:(UIViewController*)viewController  block:(OKCancelBlock)ablock ;\n";
		m+="{\n";
		m+="    okBlock = ablock ;\n";
		m+="    \n";
		m+="    SqlApp *sql=[[SqlApp alloc] init];\n";
		m+="   \n";
		m+="    ErrorObject *error1=[sql selectPM_CODEERRORMSG:errorMsg.errorCode];\n";
		m+="    if(error1==nil || (error1!=nil && error1.errorDesc==nil)||(error1!=nil && [error1.errorDesc isEqualToString:@\"\"]))\n";
		m+="    {\n";
		m+="        error1=[[ErrorObject alloc] init];\n";
		m+="        error1.errorDesc=errorMsg.errorDesc;\n";
		m+="        error1.errorCode=errorMsg.errorCode;\n";
		m+="        error1.errorType=errorMsg.errorType;\n";
		m+="        \n";
		m+="    }\n";
		m+="    \n";
		m+="     ErrorObject *error2=[sql selectPM_DESCERRORMSG:error1];\n";
		m+="    \n";
		m+="    \n";
		m+="    if (error2.errorType==nil) {\n";
		m+="       error2.errorType=@\"01\";\n";
		m+="    }\n";
		m+="  \n";
		m+="  \n";
		m+="    \n";
		m+="    if([error2.errorType isEqualToString:@\"01\"]||[error2.errorType isEqualToString:@\"03\"])//01\n";
		m+="    { //对话框\n";
		m+="   \n";
		m+="        \n";
		m+="    //初始化AlertView\n";
		m+="    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"温馨提示\"\n";
		m+="                                                    message:error2.errorDesc\n";
		m+="                                                   delegate:self\n";
		m+="                                          cancelButtonTitle:@\"确定\"\n";
		m+="                                          otherButtonTitles:nil,nil];\n";

		m+="    alert.tag = 0;\n";
		m+=" \n";
		m+="    [alert show];\n";
		m+="    \n";
		m+="    }else if([error2.errorType isEqualToString:@\"02\"])//02\n";
		m+="    {//toast\n";
		m+="    \n";
		m+="        if(title!=nil)\n";
		m+="        {\n";
		m+="        NSString *msg=[NSString stringWithFormat:@\"%@%@\",title,error2.errorDesc];\n";
		m+="        \n";
		m+="            dispatch_async(dispatch_get_main_queue(), ^{\n";
		m+="                \n";
		m+="                if (errorMsg.errorPic) {\n";
		m+="                    [SVProgressHUD showErrorWithStatus:msg duration:2];\n";
		m+="                }else\n";
		m+="                {\n";
		m+="                   [SVProgressHUD showSuccessWithStatus:msg duration:2];\n";
		m+="                }\n";
		m+="            });\n";
		m+="         \n";
		m+="            //[viewController.view makeToast:msg];\n";
		m+="        }else{\n";
		m+="              dispatch_async(dispatch_get_main_queue(), ^{\n";
		m+="                  if (errorMsg.errorPic) {\n";
		m+="                         [SVProgressHUD showErrorWithStatus:error2.errorDesc duration:2];\n";
		m+="                  }else\n";
		m+="                  {\n";
		m+="             [SVProgressHUD showSuccessWithStatus:error2.errorDesc duration:2];\n";
		m+="                  }\n";
		m+="               });\n";
		m+="         //[viewController.view makeToast:error2.errorDesc];\n";
		m+="        }\n";
		m+="        \n";
		m+="    }else if([error2.errorType isEqualToString:@\"05\"])//03\n";
		m+="    {\n";
		m+="        \n";
		m+="        //初始化AlertView\n";
		m+="        UIAlertView *alert = [[UIAlertView alloc] initWithTitle:@\"温馨提示\"\n";
		m+="                                                        message:error2.errorDesc\n";
		m+="                                                       delegate:self\n";
		m+="                                              cancelButtonTitle:@\"确定\"\n";
		m+="                                              otherButtonTitles:@\"取消\",nil];\n";
		m+="            [alert show];\n";
		m+="    }\n";
		m+="}\n";











		m+="    NSString *baseUrl=@\"http://localhost:8080/Serlet/Serverlet8052310?parameter=\";\n";
		m+="    NSString *fullUrl = [baseUrl stringByAppendingString:[businessparam JSONString]];\n";
		m+="    NSURL *url = [NSURL URLWithString:[fullUrl stringByAddingPercentEscapesUsingEncoding: NSUTF8StringEncoding]];\n";
		m+="    NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];\n";
		m+="    [request setHTTPMethod:@\"GET\"];\n";
		m+="    [request setTimeoutInterval:30.0];\n";
		m+="    \n";
		m+="    NSOperationQueue *queue = [[NSOperationQueue alloc]init];\n";
		m+="    [NSURLConnection sendAsynchronousRequest:request\n";
		m+="                                       queue:queue\n";
		m+="                           completionHandler:^(NSURLResponse *response, NSData *data, NSError *error){\n";
		m+="                               if (error) {\n";
		m+="                                   NSLog(@\"Httperror:%@%d\", error.localizedDescription,error.code);\n";
		m+="                               }else{\n";
		m+="                                   \n";
		m+="                                   NSInteger responseCode = [(NSHTTPURLResponse *)response statusCode];\n";
		m+="                                   \n";
		m+="                                   NSString *responseString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];\n";
		m+="                                   \n";
		m+="                                   NSLog(@\"HttpResponseCode:%d\", responseCode);\n";
		m+="                                   NSLog(@\"HttpResponseBody %@\",responseString);\n";
		m+="                                   dispatch_async(dispatch_get_main_queue(), ^{\n";
		m+="                                       [self.tableView reloadData];\n";
		m+="                                   });\n";
		m+="                               }\n";
		m+="                           }];\n";

		m+="@end\n";














		m+="  //时期选择Start\n";
		m+="      \n";
		m+="      -(void)diyTimeValueButtonClicked:(UIButton *)btn{\n";
		m+="          id mId = objc_getAssociatedObject(btn, \"mId\");\n";
		m+="          //取绑定数据int mId2 = btn.tag;\n";
		m+="          //取绑定数据\n";
		m+="          \n";
		m+="          \n";
		m+="          UIDatePicker *datePicker = [[UIDatePicker alloc] init];\n";
		m+="          datePicker.tag = 101;\n";
		m+="          datePicker.datePickerMode = UIDatePickerModeDate;\n";
		m+="          \n";
		m+="          // 设置区域为中国简体中文\n";
		m+="          datePicker.locale = [[NSLocale alloc] initWithLocaleIdentifier:@\"zh_CN\"];\n";
		m+="          \n";
		m+="          // 设置picker的显示模式：只显示日期\n";
		m+="          datePicker.datePickerMode = UIDatePickerModeDate;\n";
		m+="          \n";
		m+="          [datePicker setDate:[NSDate date] animated:YES];    // 设置日期控件值\n";
		m+="          \n";
		m+="          [datePicker addTarget:self\n";
		m+="                         action:@selector(dateValueChange:)\n";
		m+="               forControlEvents:UIControlEventValueChanged];  // 时间改变时触发此事件\n";
		m+="          \n";
		m+="          \n";
		m+="          \n";
		m+="#ifdef __IPHONE_7_0\n";
		m+="          NSString *title = UIDeviceOrientationIsLandscape([UIDevice currentDevice].orientation) ? @\"\n\n\n\n\n\n\n\n\n\" : @\"\n\n\n\n\n\n\n\n\n\n\n\n\";\n";
		m+="          \n";
		m+="          UIActionSheet* startsheet = [[UIActionSheet alloc] initWithTitle:title\n";
		m+="                                                                  delegate:self\n";
		m+="                                                         cancelButtonTitle:@\"确定\"\n";
		m+="                                                    destructiveButtonTitle:nil\n";
		m+="                                                         otherButtonTitles:nil,\n";
		m+="                                       nil];\n";
		m+="          startsheet.tag = 333;\n";
		m+="          [startsheet addSubview:datePicker];\n";
		m+="          [startsheet showInView:self.view];\n";
		m+="          \n";
		m+="          \n";
		m+="          \n";
		m+="#else\n";
		m+="          \n";
		m+="          \n";
		m+="          UIAlertController *alert = [UIAlertController alertControllerWithTitle:@\"\n\n\n\n\n\n\n\n\n\n\n\n\" message:nil 　　preferredStyle:UIAlertControllerStyleActionSheet];\n";
		m+="          \n";
		m+="          [alert.view addSubview:datePicker];\n";
		m+="          \n";
		m+="          UIAlertAction *ok = [UIAlertAction actionWithTitle:@\"确定\" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {\n";
		m+="              \n";
		m+="              NSDateFormatter* dateFormat = [[NSDateFormatter alloc] init];\n";
		m+="              \n";
		m+="              //实例化一个NSDateFormatter对象\n";
		m+="              \n";
		m+="              [dateFormat setDateFormat:@\"yyyy-MM-dd\"];//设定时间格式\n";
		m+="              \n";
		m+="              NSString *dateString = [dateFormat stringFromDate:datePicker.date];\n";
		m+="              \n";
		m+="              //求出当天的时间字符串\n";
		m+="              [insureBaseTimeLinearLayout.diyTimeValueButton.titleLabel setText:timestamp];\n";
		m+="                 diyTime=timestamp;\n";
		m+="              \n";
		m+="          }];\n";
		m+="          \n";
		m+="          \n";
		m+="          UIAlertAction *cancel = [UIAlertAction actionWithTitle:@\"取消\" style:UIAlertActionStyleDefault handler:^(UIAlertAction *action) {\n";
		m+="              \n";
		m+="              　 }];\n";
		m+="          \n";
		m+="          [alert addAction:ok];\n";
		m+="          \n";
		m+="          [alert addAction:cancel];\n";
		m+="          \n";
		m+="          [self presentViewController:alert animated:YES completion:^{ }];\n";
		m+="          \n";
		m+="          \n";
		m+="#endif\n";
		m+="          \n";
		m+="          \n";
		m+="      }\n";
		m+="      \n";
		m+="      \n";
		m+="      \n";
		m+="      \n";
		m+="      -(void) actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex{\n";
		m+="          UIDatePicker *datePicker = (UIDatePicker *)[actionSheet viewWithTag:101];\n";
		m+="          NSDateFormatter *formattor = [[NSDateFormatter alloc] init];\n";
		m+="          \n";
		m+="          \n";
		m+="          formattor.dateFormat = @\"yyyy-MM-dd\";\n";
		m+="          \n";
		m+="          NSString *timestamp = [formattor stringFromDate:datePicker.date];\n";
		m+="          \n";
		m+="          \n";
		m+="          [insureBaseTimeLinearLayout.diyTimeValueButton.titleLabel setText:timestamp];\n";
		m+="             diyTime=timestamp;\n";
		m+="      }\n";
		m+="      \n";
		m+="      -(void)dateValueChange:(UIDatePicker*)datepick\n";
		m+="      {\n";
		m+="          NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];\n";
		m+="          [dateFormatter setDateFormat:@\"yyyy-MM-dd\"];\n";
		m+="          NSString *timestamp =  [dateFormatter stringFromDate: [datepick date]];\n";
		m+="          \n";
		m+="          [insureBaseTimeLinearLayout.diyTimeValueButton.titleLabel setText:timestamp];\n";
		m+="          diyTime=timestamp;\n";
		m+="      }\n";
		m+="      \n";
		m+="      \n";
		m+="      //时期选择End\n";


		
		
	}

}
