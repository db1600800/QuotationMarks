package com.chinapost.palmpost;

import java.io.IOException;
import java.net.ConnectException;
import java.net.SocketTimeoutException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.xmlpull.v1.XmlPullParserException;

import com.chinapost.BaseServiceInterface;
import com.chinapost.library.BaseConnectionCallBack;
import com.chinapost.library.BaseServiceConnection;

import com.chinapost.palmpost.DlvTimeStatActivity.ScrollAdapter;
import com.chinapost.utils.Constants;
import com.chinapost.utils.JsonUtils;
import com.chinapost.view.date.JudgeDate;
import com.chinapost.view.date.ScreenInfo;
import com.chinapost.view.date.WheelMain;
import com.chinapost.webservice.WebServiceUtils;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.app.ProgressDialog;
import android.app.DatePickerDialog.OnDateSetListener;
import android.content.Context;
import android.content.DialogInterface;
import android.graphics.Paint;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Build.VERSION;
import android.os.RemoteException;
import android.util.Log;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.View.OnClickListener;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.HorizontalScrollView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.RadioGroup.OnCheckedChangeListener;

/**
 * 2.2.	投递量统计
 * 
 */
public class DeliveryRateActivity extends Activity implements
		BaseConnectionCallBack {

	public static final String PERMISSION = "palmpostAndroid_DlvAmount";// 菜单权限

	private ListView mListView;

	public HorizontalScrollView mTouchView;

	protected List<DeliveryRateCHScrollView> mHScrollViews;

	private BaseServiceInterface mBaseService;
	private BaseServiceConnection mBaseServiceConnection = new BaseServiceConnection(
			this);
	private String userPara = null;
	private ArrayList<HashMap<String, String>> lists = new ArrayList<HashMap<String, String>>();// 当前页数据集合
	private Handler handler = new Handler();

	TextView startTimeTextView;
	TextView endTimeTextView;

	String mailType = "318";
	String delType = "1";

	private ListView listView;// 展示列表
	private Button refreshBtn;// 刷新数据按钮
	RelativeLayout ll_listlayout;
	TextView title_title;
	private List<List<HashMap<String, String>>> pages = new ArrayList<List<HashMap<String, String>>>();
	SimpleDateFormat sdfYMD = new SimpleDateFormat("yyyy年MM月dd日");
	Calendar calendar = Calendar.getInstance();
	private LinearLayout ll_start_date_layout;// 开始日期
	private LinearLayout ll_end_date_layout;// 结束日期
	private TextView tv_start_date, tv_end_date;

	boolean isBack = false;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_delivery_rate);

		// refreshList();

		Bundle extras = getIntent().getExtras();
		if (extras != null) {
			userPara = extras.getString("userPara");
		}

		listView = (ListView) findViewById(R.id.scroll_list);
		refreshBtn = (Button) findViewById(R.id.refresh_btn);
		ll_listlayout = (RelativeLayout) findViewById(R.id.ll_listlayout);

		/** title */
		title_title = (TextView) findViewById(R.id.title_title);
		title_title.setText(extras.getString("title"));

		/** 开始时间与结束时间 **/
		ll_start_date_layout = (LinearLayout) findViewById(R.id.ll_start_date_layout);
		ll_end_date_layout = (LinearLayout) findViewById(R.id.ll_end_date_layout);
		tv_start_date = (TextView) findViewById(R.id.tv_start_date);
		tv_end_date = (TextView) findViewById(R.id.tv_end_date);
		calendar.add(Calendar.DATE, -1);// 结束日期是昨天
		tv_end_date.setText(sdfYMD.format(calendar.getTime()));
		calendar.add(Calendar.DATE, -3);// 开始日期是昨天的前三天
		tv_start_date.setText(sdfYMD.format(calendar.getTime()));
		OnDateClickListener clickListener = new OnDateClickListener();
		ll_start_date_layout.setOnClickListener(clickListener);
		ll_end_date_layout.setOnClickListener(clickListener);

		// mail种类
		RadioGroup group = (RadioGroup) this.findViewById(R.id.type_radiogroup);
		// 绑定一个匿名监听器
		group.setOnCheckedChangeListener(new OnCheckedChangeListener() {

			@Override
			public void onCheckedChanged(RadioGroup arg0, int arg1) {
				// TODO Auto-generated method stub
				// 获取变更后的选中项的ID
				int radioButtonId = arg0.getCheckedRadioButtonId();

				// 根据ID获取RadioButton的实例
				RadioButton rb = (RadioButton) findViewById(radioButtonId);
				// 更新文本内容，以符合选中项
				if (rb.getText().equals("国内小包")) {
					mailType = "318";
				} else if (rb.getText().equals("约投挂号")) {
					mailType = "21Y";
				} else if (rb.getText().equals("代投速递")) {
					mailType="410,420,430,440,41J,41K,1062,41Z";
				}

			}
		});

		mListView = (ListView) findViewById(R.id.scroll_list);

		/** 查询 **/
		findViewById(R.id.title_right_button).setVisibility(View.VISIBLE);
		findViewById(R.id.title_right_button).setOnClickListener(
				new OnClickListener() {
					@Override
					public void onClick(View v) {
						
						pages.clear();
						lists = new ArrayList<HashMap<String, String>>();

						requestData(userPara.split("#")[0], "0");
					}
				});

		/** 返回上一级 **/
		findViewById(R.id.title_back_button).setOnClickListener(
				new OnClickListener() {
					@Override
					public void onClick(View v) {
						if(pages!=null && pages.size()==0)
						{
							DeliveryRateActivity.this.finish();
						}else
						{
							int count=pages.size();
							pages.remove(count-1);
							 count=pages.size();
							 if(count==0)
							 {
								 DeliveryRateActivity.this.finish();
							 }else
							 {
							lists=(ArrayList<HashMap<String, String>>) pages.get(count-1);
							refreshList();
							 }
						}
						
						

					}
				});

		/** 刷新 **/
		refreshBtn.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				
				lists = new ArrayList<HashMap<String, String>>();
				// pages = new ArrayList<ArrayList<HashMap<String, String>>>();
				requestData(userPara.split("#")[0], "0");
			}
		});

		boolean result = mBaseServiceConnection.bindService();
		if (result) {
			setBaseService(mBaseServiceConnection.getBaseService());

		}

	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if ((keyCode == KeyEvent.KEYCODE_BACK)) {

			if(pages!=null && pages.size()==0)
			{
				DeliveryRateActivity.this.finish();
			}else
			{
				int count=pages.size();
				pages.remove(count-1);
				 count=pages.size();
				 if(count==0)
				 {
					 DeliveryRateActivity.this.finish();
				 }else
				 {
				lists=(ArrayList<HashMap<String, String>>) pages.get(count-1);
				refreshList();
				 }
			}
			
			
			return false;

		} else {
			return super.onKeyDown(keyCode, event);
		}

	}

	WheelMain wheelMain;
	DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

	private void showToast(String text) {
		Toast.makeText(this, text, Toast.LENGTH_SHORT).show();
	}

	/**
	 * 开始&结束 日期点击时间
	 * 
	 */
	private class OnDateClickListener implements OnClickListener {

		TextView txttime;

		@Override
		public void onClick(final View v) {

			if (v.getId() == R.id.ll_start_date_layout) {
				txttime = tv_start_date;
			} else {
				txttime = tv_end_date;
			}

			LayoutInflater inflater = LayoutInflater
					.from(DeliveryRateActivity.this);
			final View timepickerview = inflater.inflate(
					R.layout.ipo_dialog_date_picker, null);
			ScreenInfo screenInfo = new ScreenInfo(
					DeliveryRateActivity.this);
			wheelMain = new WheelMain(timepickerview);// 设置日期控件
			wheelMain.screenheight = screenInfo.getHeight();
			String time = txttime.getText().toString();
			try {
				time = dateFormat.format(sdfYMD.parse(time));// 日期格式转换
																// yyyy年MM月dd日
																// from
																// yyyy-MM-dd
			} catch (ParseException e1) {
				e1.printStackTrace();
			}
			Calendar calendar = Calendar.getInstance();
			if (JudgeDate.isDate(time, "yyyy-MM-dd")) {
				try {
					calendar.setTime(dateFormat.parse(time));
				} catch (ParseException e) {
					e.printStackTrace();
				}
			}
			int year = calendar.get(Calendar.YEAR);
			int month = calendar.get(Calendar.MONTH);
			int day = calendar.get(Calendar.DAY_OF_MONTH);
			wheelMain.initDateTimePicker(year, month, day);
			new AlertDialog.Builder(DeliveryRateActivity.this)
					.setTitle("选择时间")
					.setView(timepickerview)
					.setPositiveButton("确定",
							new DialogInterface.OnClickListener() {
								@Override
								public void onClick(DialogInterface dialog,
										int which) {
									try {
										if (v.getId() == R.id.ll_start_date_layout) {

											Date endDate = sdfYMD
													.parse(tv_end_date
															.getText()
															.toString());
											int compareTo = dateFormat.parse(
													wheelMain.getTime())
													.compareTo(endDate);

										 if (compareTo < 0 ||compareTo==0) {// 开始时间小于结束时间
												txttime.setText(sdfYMD.format(dateFormat
														.parse(wheelMain
																.getTime())));// 开始日期
											} else {// 开始时间大于结束时间
												showToast("开始时间不能大于结束时间.");
											}
										} else {
											Date startDate = sdfYMD
													.parse(tv_start_date
															.getText()
															.toString());
											int compareTo = dateFormat.parse(
													wheelMain.getTime())
													.compareTo(startDate);
                                             if (compareTo < 0) {// 开始时间小于结束时间
												showToast("结束时间不能小于开始时间.");
											} else {// 开始时间大于结束时间
												txttime.setText(sdfYMD.format(dateFormat
														.parse(wheelMain
																.getTime())));// 开始日期
											}
										}

									} catch (ParseException e) {
										e.printStackTrace();
									}
								}
							})
					.setNegativeButton("取消",
							new DialogInterface.OnClickListener() {
								@Override
								public void onClick(DialogInterface dialog,
										int which) {
								}
							}).show();
		}

	}



	class AnsyTry extends AsyncTask<String, TextView, String> {

		ProgressDialog progressDialog;
		String hintString = null;

		@Override
		protected String doInBackground(String... deptCode) {
			// TODO Auto-generated method stub
		
			String result = null;
			try {
				String param = "";
				// 请求 BaseServiceInterface mBaseService, String
				// userPara,String startDate, String endDate, String
				// queryType,String deptCode, String mailType, String
				// delType

				SimpleDateFormat sdfYMD = new SimpleDateFormat("yyyyMMdd");
				SimpleDateFormat sdfYMD2 = new SimpleDateFormat("yyyy年MM月dd日");

				// BaseServiceInterface mBaseService, String userPara,
				// String startDate, String endDate, String queryType,
				// String deptCode, String mailType
				/**投递量统计**/
				param = JsonUtils.requestDlvAmount(mBaseService,
						userPara, sdfYMD.format(sdfYMD2.parse(tv_start_date
								.getText().toString()))

						, sdfYMD.format(sdfYMD2.parse(tv_end_date.getText()
								.toString())), deptCode[1], deptCode[0],
						mailType);
				Log.i("Tang", "request--->" + param);
				// 返回
				result = WebServiceUtils.getReturnInfo(param);

			} catch (SocketTimeoutException e) {
				e.printStackTrace();
				hintString = "请求超时，请稍后再试";
			} catch (ConnectException e) {
				e.printStackTrace();
				hintString = "网络连接出错，请确保手机已联网";
			} catch (IOException e) {
				e.printStackTrace();
				hintString = "暂无数据，请稍后再试";
			} catch (XmlPullParserException e) {
				e.printStackTrace();
				hintString = "暂无数据，请稍后再试";
			} catch (Exception e) {
				e.printStackTrace();
				hintString = "暂无数据，请稍后再试";
			}
			if (hintString != null) {
				handler.post(new Runnable() {
					@Override
					public void run() {
						toastError(hintString);
					}
				});
			}
			progressDialog.dismiss();

			return result;
		}

		@Override
		protected void onPostExecute(String result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);

			Log.i("Tang", "result--->" + result);
			if (result == null) {
				hintString = "暂无数据，请稍后再试";

				toastError(hintString);
				return;
			}

			JSONObject jsonResult;
			try {
				jsonResult = new JSONObject(result);

				boolean success = jsonResult.getBoolean("success");

				final String data = jsonResult.getString("data");
				if (success) {
					
					// 解密des
					String decryptStr = mBaseService.decrypt(data,
							Constants.ENCRYPT_KEY);
					Log.i("Tang", "decryptStr--->" + decryptStr);
					lists = reSpondExpectParse(decryptStr);

					if (lists.isEmpty()) {
						hintString = "暂无数据，请稍后再试";
						
						listView.setVisibility(View.INVISIBLE);
						
						toastError(hintString);

						// progressDialog.dismiss();
						// return;
						
					} else {
						pages.add(lists);
						listView.setVisibility(View.VISIBLE);
						ll_listlayout.setVisibility(View.VISIBLE);
						refreshBtn.setVisibility(View.GONE);
						refreshList();

					
					}

				} else {

				}

			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (RemoteException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}

		@Override
		protected void onPreExecute() {
			// TODO Auto-generated method stub\

			super.onPreExecute();

			progressDialog = ProgressDialog.show(DeliveryRateActivity.this,
					"查询", "查询中...", true, false);
		}

		@Override
		protected void onProgressUpdate(TextView... values) {

			super.onProgressUpdate(values);
		}

	}

	private void requestData(final String deptCode, String queryType) {

		new AnsyTry().execute(deptCode, queryType);
	}

	private void toastError(String hintString) {
//		refreshBtn.setText("点击屏幕刷新数据");
//		refreshBtn.setVisibility(View.VISIBLE);
//		listView.setVisibility(View.GONE);
//		ll_listlayout.setVisibility(View.GONE);
		Toast.makeText(this, hintString, Toast.LENGTH_LONG).show();
	}
	
	
	


	/**投递机构名*/
	static String dlv_org_name = "dlv_org_name".toUpperCase();
	/**投递机构代号*/
	static String dlv_org_code = "dlv_org_code".toUpperCase();
	/**进口量*/
	static String rcv_mail_count = "rcv_mail_count".toUpperCase();
	/**占比*/
	static String rate = "rate".toUpperCase();
	

	ScrollAdapter adapter;

	private void refreshList() {

		if (mHScrollViews != null) {
			iniScroll();
		}

		mHScrollViews = new ArrayList<DeliveryRateCHScrollView>();

		DeliveryRateCHScrollView headerScroll = (DeliveryRateCHScrollView) findViewById(R.id.item_scroll_title);
		mHScrollViews.add(headerScroll);

		adapter = new ScrollAdapter(this, lists,
				R.layout.activity_delivery_rate_item, new String[] {
						dlv_org_name, rcv_mail_count, rate }, new int[] { R.id.item_title,
						R.id.item_data1, R.id.item_data2});
		mListView.setAdapter(adapter);

	}

	public void addHViews(final DeliveryRateCHScrollView hScrollView) {
		if (!mHScrollViews.isEmpty()) {
			int size = mHScrollViews.size();
			DeliveryRateCHScrollView scrollView = mHScrollViews
					.get(size - 1);
			final int scrollX = scrollView.getScrollX();

			if (scrollX != 0) {
				mListView.post(new Runnable() {
					@Override
					public void run() {

						hScrollView.scrollTo(scrollX, 0);
					}
				});
			}
		}
		mHScrollViews.add(hScrollView);
	}

	public void onScrollChanged(int l, int t, int oldl, int oldt) {
		if(mHScrollViews==null)
			return;
		for (DeliveryRateCHScrollView scrollView : mHScrollViews) {

			if (mTouchView != scrollView)
				scrollView.smoothScrollTo(l, t);
		}
	}

	public void iniScroll() {
		for (DeliveryRateCHScrollView scrollView : mHScrollViews) {

			if (mTouchView != scrollView)
				scrollView.smoothScrollTo(0, 0);
		}
	}

	class ScrollAdapter extends BaseAdapter {

		private List<? extends Map<String, ?>> datas;
		private int res;
		private String[] from;
		private int[] to;
		private Context context;

		public ScrollAdapter(Context context,
				List<? extends Map<String, ?>> data, int resource,
				String[] from, int[] to) {
			// super(context, data, resource, from, to);
			this.context = context;
			this.datas = data;
			this.res = resource;
			this.from = from;
			this.to = to;
		}

		public void refreshData(List<? extends Map<String, ?>> data) {
			datas = data;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			View v = convertView;
			if (v == null) {
				v = LayoutInflater.from(context).inflate(res, null);

				addHViews((DeliveryRateCHScrollView) v
						.findViewById(R.id.item_scroll));
				View[] views = new View[to.length];
				for (int i = 0; i < to.length; i++) {
					View tv = v.findViewById(to[i]);
					;
					v.setOnClickListener(clickListener);
					views[i] = tv;
				}
				v.setTag(views);
			}
			View[] holders = (View[]) v.getTag();
			int len = holders.length;
			for (int i = 0; i < len; i++) {

				if (i == 0) {
					((TextView) holders[i]).setText(this.datas.get(position)
							.get(from[i]).toString().split("#")[0]);
					((TextView) holders[i]).setTag(this.datas.get(position)
							.get(from[i]).toString().split("#")[1]);
					((TextView) holders[i]).getPaint().setFlags(Paint.UNDERLINE_TEXT_FLAG);//下划线
				} else {
					((TextView) holders[i]).setText(this.datas.get(position)
							.get(from[i]).toString());
				}

			}
			return v;
		}

		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			return datas.size();
		}

		@Override
		public Object getItem(int position) {
			// TODO Auto-generated method stub
			return null;
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return 0;
		}
	}


	protected View.OnClickListener clickListener = new View.OnClickListener() {
		@Override
		public void onClick(View v) {
			isBack = false;
			View[] holders = (View[]) v.getTag();
			int len = holders.length;
			for (int i = 0; i < len; i++) {
				if (i == 0) {
					String beforeLevelDepcode;
					String beforeLevelname;
					beforeLevelDepcode = ((TextView) holders[i]).getTag()
							.toString();

					beforeLevelname = ((TextView) holders[i]).getText()
							.toString();
					
					
					
					requestData(beforeLevelDepcode, "1");
					
				
					

				}
			}
		}
	};

	@Override
	public void connectionCallBack() {
		// TODO Auto-generated method stub
		if (mBaseService != null) {

			requestData(userPara.split("#")[0], "0");
		}
	}

	@Override
	public Handler getHandler() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void setBaseService(BaseServiceInterface baseService) {
		// TODO Auto-generated method stub
		mBaseService = baseService;
	}

	public static ArrayList<HashMap<String, String>> reSpondExpectParse(
			String reSpondparams) {
		reSpondparams = reSpondparams.replaceAll("null", "0");
		ArrayList<HashMap<String, String>> lists = new ArrayList<HashMap<String, String>>();

		try {
			JSONObject jsonResult = new JSONObject(reSpondparams);

			JSONObject jsonResponse = jsonResult.getJSONObject("response");
			if (jsonResponse != null) {
				boolean success = jsonResponse
						.optBoolean(Constants.RESULT_EXPECT_KEY_SUCCESS);
				if (!success) {
					return lists;
				}
				if (jsonResponse.has(Constants.RESULT_CHART_KEY_GROUPS_ITEMS)) {
					JSONArray arrays = jsonResponse
							.getJSONArray(Constants.RESULT_CHART_KEY_GROUPS_ITEMS);
					if (arrays == null || arrays.length() == 0) {
						// HashMap<String, String> mapItem = new HashMap<String,
						// String>();
						// mapItem.put(Constants.RESULT_EXPECT_KEY_MSG, "true");
						// lists.add(mapItem);
						return lists;
					}

//					dlv_org_name	投递机构名
//					dlv_org_code	投递机构代号
//					rcv_mail_count	进口量
//					rate	占比
					for (int i = 0; i < arrays.length(); i++) {
						JSONObject item = arrays.optJSONObject(i);
						if (item != null) {
							HashMap<String, String> mapItem = new HashMap<String, String>();
							// =====================code and name
							// start==================//
							if (item.has(dlv_org_name)) {
								mapItem.put(dlv_org_name,
										item.optString(dlv_org_name));
							}
							if (item.has(dlv_org_code)) {
								String name = mapItem.get(dlv_org_name);
								mapItem.put(
										dlv_org_name,
										name + "#"
												+ item.optString(dlv_org_code));
								// mapItem.put(DLV_ORG_CODE,
								// item.optString(DLV_ORG_CODE));
							}
							// =====================code and name
							// end==================//
							// -----------------------------------------------//
							// =====================24 start==================//
							if (item.has(rcv_mail_count)) {

								mapItem.put(rcv_mail_count,
										item.optString(rcv_mail_count));
							}
							if (item.has(rate)) {

								mapItem.put(rate,
										item.optString(rate));
							}

//							if (item.has(dlv_rate)) {
//
//								mapItem.put(dlv_rate, item.optString(dlv_rate));
//							}
//
//							if (item.has(dr_dlv_rate)) {
//
//								mapItem.put(dr_dlv_rate,
//										item.optString(dr_dlv_rate));
//							}
//
//							if (item.has(r2_dlv_rate)) {
//
//								mapItem.put(r2_dlv_rate,
//										item.optString(r2_dlv_rate));
//							}
//
//							if (item.has(r3_dlv_rate)) {
//
//								mapItem.put(r3_dlv_rate,
//										item.optString(r3_dlv_rate));
//							}
//
//							if (item.has(over_r3_dlv_rate)) {
//
//								mapItem.put(over_r3_dlv_rate,
//										item.optString(over_r3_dlv_rate));
//							}

							lists.add(mapItem);
						}
					}

					// HashMap<String, String> mapItem = new HashMap<String,
					// String>();
					// mapItem.put(Constants.DLV_ORG_NAME, "总计");
					// // ====================24======================//
					// mapItem.put(Constants.DLV_MAIL_COUNT_24,
					// String.valueOf(dlv_mail_count_24));
					// mapItem.put(Constants.DLV_MAIL_COUNT_24_8,
					// String.valueOf(dlv_mail_count_24_8));
					// mapItem.put(Constants.DLV_MAIL_COUNT_24_15,
					// String.valueOf(dlv_mail_count_24_15));
					// // ===================48=======================//
					// mapItem.put(Constants.DLV_MAIL_COUNT_48,
					// String.valueOf(dlv_mail_count_48));
					// mapItem.put(Constants.DLV_MAIL_COUNT_48_8,
					// String.valueOf(dlv_mail_count_48_8));
					// mapItem.put(Constants.DLV_MAIL_COUNT_48_15,
					// String.valueOf(dlv_mail_count_48_15));
					// // ===================72=======================//
					// mapItem.put(Constants.DLV_MAIL_COUNT_72,
					// String.valueOf(dlv_mail_count_72));
					// mapItem.put(Constants.DLV_MAIL_COUNT_72_8,
					// String.valueOf(dlv_mail_count_72_8));
					// mapItem.put(Constants.DLV_MAIL_COUNT_72_15,
					// String.valueOf(dlv_mail_count_72_15));
					// lists.add(mapItem);

					return lists;
				}
			}

		} catch (JSONException e) {
			e.printStackTrace();
			return new ArrayList<HashMap<String, String>>();
		}

		return lists;
	}

}
