//
//  StampTranCallForNoSingleton.m
//  Philately
//
//  Created by gdpost on 15/6/17.
//  Copyright (c) 2015年 gdpost. All rights reserved.
//

#import "StampTranCallForNoSingleton.h"
#import "SysBaseInfo.h"
#import <OperatorMsg.h>
#import "SVProgressHUD.h"
#import "PromptError.h"
#import "JSONKit.h"

#include <arpa/inet.h>
#include <net/if.h>
#include <ifaddrs.h>
#import "SVProgressHUD.h"
#import "DeviceInfo.h"

@implementation StampTranCallForNoSingleton


/*
// Only override drawRect: if you perform custom drawing.
// An empty implementation adversely affects performance during animation.
- (void)drawRect:(CGRect)rect {
    // Drawing code
}
*/
  NSTimer *timmer;
bool isContinueOpenLoading;


-(void)jyTranCall:(SysBaseInfo *) sysBaseInfo  cstmMsg:(CstmMsg*)cstmMsg formName:(NSString*)formName business:(NSDictionary*)business delegate:(id<StampTranCallForNoSingletonDelegate>)delegate viewController:(UIViewController*)viewController
{
    isContinueOpenLoading=sysBaseInfo.isOpenLoading;
    sysBaseInfo.isOpenLoading=false;
    self.viewController=viewController;
    self.delegate=delegate;
    

     dispatch_async(dispatch_get_main_queue(), ^{
       
         if ([SVProgressHUD isVisible]==true) {
             
         }else
         {
             if (sysBaseInfo.isNoHasLoading==true) {
                 
             }else
             {
             [SVProgressHUD showWithStatus:@"努力加载中..." maskType:SVProgressHUDMaskTypeClear];
             }
         }
     });


    
    NSMutableDictionary *tranBodyDic=[[NSMutableDictionary alloc] init];
    tranBodyDic=business;

   
//    headMap.put(SendMsgHead.H_BRCH_NO, "000000");
//    headMap.put(SendMsgHead.H_SFILE_NUM, "0000");
//    headMap.put(SendMsgHead.H_CHANNEL_TRACE, "");
//    headMap.put(SendMsgHead.H_CHANNEL_NO, DeviceInfo.channelNo);
//    headMap.put(SendMsgHead.H_IP_ADDR, DeviceInfo.deviceIP);
//    headMap.put(SendMsgHead.H_TTY, CarServiceAgentApplication.appServiceInvoker.mLogicID);
//    headMap.put(SendMsgHead.H_SEQ_NO, "");
//    headMap.put(SendMsgHead.H_AUTH_OPER_NO, "");
//    headMap.put(SendMsgHead.H_OPER_NO, "00");
//    headMap.put(SendMsgHead.H_OPER_NO_NEW, OperatorMsg.oprID);
//    headMap.put(SendMsgHead.H_BRCH_NO_NEW, OperatorMsg.organID);
    
    DeviceInfo *deviceInfo=[DeviceInfo sharedInstance];
    
    NSMutableDictionary *tranheadDic=[[NSMutableDictionary alloc] init];
    // 1	局号(包头使用)	H_BRCH_NO	字符	7
    [tranheadDic setValue:@"0000000" forKey:@"H_BRCH_NO"];
    // 2	柜员号(包头使用)	H_OPER_NO	字符	2
    [tranheadDic setValue:@"00" forKey:@"H_OPER_NO"];
    // 3	交易流水号	H_SEQ_NO	数字
    [tranheadDic setValue:@"" forKey:@"H_SEQ_NO"];
    //  4	IP地址	H_IP_ADDR	字符	15
    [tranheadDic setValue:deviceInfo.H_IP_ADDR forKey:@"H_IP_ADDR"];
    //5	终端号(不带/dev/tty)	H_TTY	字符	100
    [tranheadDic setValue:deviceInfo.LogicDeviceNo forKey:@"H_TTY"];
    // 6	授权柜员号	H_AUTH_OPER_NO	字符	4
    [tranheadDic setValue:@"" forKey:@"H_AUTH_OPER_NO"];
    //7	渠道流水号	H_CHANNEL_TRACE	字符	12
    [tranheadDic setValue:@"" forKey:@"H_CHANNEL_TRACE"];
    //  8	渠道标识	H_CHANNEL_NO	字符	2
    [tranheadDic setValue:@"06" forKey:@"H_CHANNEL_NO"];
    //  9	综合服务平台支局号	H_BRCH_NO_NEW	字符	8
    [tranheadDic setValue:deviceInfo.H_BRCH_NO_NEW forKey:@"H_BRCH_NO_NEW"];
    // 10	综合服务平台柜员号码	H_OPER_NO_NEW	字符	4
    [tranheadDic setValue:deviceInfo.H_OPER_NO_NEW forKey:@"H_OPER_NO_NEW"];
    // 11	上送文件数量循环域开始	H_SFILE_NUM	数字
    [tranheadDic setValue:@"0000" forKey:@"H_SFILE_NUM"];
    // 12	不带路径上送文件名	H_SEND_FILE	字符	60
   // [tranheadDic setValue:@"440000004509" forKey:@"H_SEND_FILE"];
    
    
    
   // NSMutableDictionary *sendDataDic=[[NSMutableDictionary alloc] init];
    [tranBodyDic setValue:tranheadDic forKey:@"SNDMSG_HEAD"];
//      [sendDataDic setValue:tranBodyDic forKey:@"tranBody"];
//    
//    NSMutableDictionary *fullDic=[[NSMutableDictionary alloc] init];
//    [fullDic setValue:sendDataDic forKey:@"sendData"];
    
    
    
   
  
          serviceInvoker=[[ServiceInvoker alloc]init];

  
    [serviceInvoker  setDelegate:self];

     NSLog(@"hobby request %@ %@",formName,tranBodyDic);
    [serviceInvoker callWebservice:tranBodyDic formName:formName delegate:self];

    
    timmer  = [NSTimer scheduledTimerWithTimeInterval:35 target:self selector:@selector(timeFire) userInfo:nil repeats:NO];

}

-(void)timeFire
{
       [SVProgressHUD dismiss];
    
//    MsgReturn *msgReturn= [[MsgReturn alloc]init ];
//    msgReturn.errorCode=ERROR_TIMEOUT_ERROR ;
//    msgReturn.errorDesc=ERROR_TIMEOUT;
//    msgReturn.errorType=@"01";
//    [PromptError changeShowErrorMsg:msgReturn title:@""  viewController:self block:^(BOOL OKCancel)
//     {
//         if (OKCancel) {
//             
//         }else
//         {
//             
//         }
//         return ;
//     }
//     ];
    
 

}


//业务请求返回错误
-(void)serviceInvokerError:(MsgReturn*)msgReturn
{
    if (msgReturn==nil ) {
        return;
    }
    
       [timmer invalidate];
     timmer=nil;
      dispatch_async(dispatch_get_main_queue(), ^{
        [SVProgressHUD dismiss];
      });
  
  
    
   if(msgReturn.formName!=nil && [msgReturn.errorCode isEqualToString:ERROR_FAILED])
    {//交易失败
        
        
    }
    
    else
    {
        //网络错误 服务器错误  传输格式错误
        if([msgReturn.errorCode isEqualToString:ERROR_DATA_FORMAT_ERROR] || [msgReturn.errorCode isEqualToString:ERROR_SERVICE_IN_ERROR] || [msgReturn.errorCode isEqualToString:ERROR_NOT_NET])
            
        {
           
            
          
            [PromptError changeShowErrorMsg:msgReturn title:@""  viewController:self block:^(BOOL OKCancel)
             {
                 if (OKCancel) {
                     
                 }else
                 {
                     
                 }
                 return ;
             }
             ];

        }
    }
       [self.delegate ReturnError:msgReturn];
    
    NSLog(@"%@ %@",msgReturn.formName,msgReturn.errorDesc);
    
}

//业务请求返回数据
-(void)serviceInvokerReturnData:(MsgReturn*)msgReturn
{
    [timmer invalidate];
    timmer=nil;
    
    if([msgReturn.errorCode isEqualToString:ERROR_SUCCESS])
    {//callWebservice成功
        
        if ([msgReturn.formName isEqual:@"JY0052"]||[msgReturn.formName isEqual:@"JY0049"]) {
            
        }
        else
        {
              dispatch_async(dispatch_get_main_queue(), ^{
                  if (isContinueOpenLoading) {//true开着
                      
                  }else
                  {//false 关闭
                  [SVProgressHUD dismiss];
                  }
               
              });
      
        }
        
        
        
        NSMutableDictionary* map=msgReturn.map;
        NSString *businessParamString=[map objectForKey:@"businessParam"];
        NSDictionary *businessParamDic=[businessParamString objectFromJSONString];
        NSString *tempdata=[businessParamDic objectForKey:@"data"];
        NSDictionary *kk=[tempdata objectFromJSONString];
        NSDictionary  *data=[kk objectForKey:@"kk"];
        
       
      
        
       
        NSMutableDictionary *returnDataDic=[data  objectForKey:@"returnData"];
        
         NSMutableDictionary *tempData=[NSMutableDictionary dictionaryWithDictionary:returnDataDic];
        
        [tempData setObject:returnDataDic forKey:@"returnBody"];
        
         NSMutableDictionary *tempData2=[[NSMutableDictionary alloc] init];
        
        [tempData2 setObject:tempData forKey:@"returnData"];
         msgReturn.map=tempData2 ;
        
        NSMutableDictionary *returnHeadDic=[returnDataDic objectForKey:@"RCVMSG_HEAD"];
        NSString *respCode=[returnHeadDic objectForKey:@"HOST_RET_ERR"];
        NSString *respDesc=[returnHeadDic objectForKey:@"HOST_RET_MSG"];
        
        NSMutableDictionary *returnBodyDic=[returnDataDic objectForKey:@"returnBody"];
    
        
        if (respCode!=nil && ![respCode isEqualToString:@""] &&![respCode isEqualToString:@"000000"]) {
            
        
        dispatch_async(dispatch_get_main_queue(), ^{
            [SVProgressHUD dismiss];
            
        });
        
            
            MsgReturn *msgReturn=[[MsgReturn alloc] init];
            msgReturn.errorCode=respCode;
            msgReturn.errorDesc=respDesc;
            msgReturn.errorType=@"02";
        //NSLog(@"%@ %@",msgReturn.errorCode,msgReturn.errorDesc);
        
        
        
        [PromptError changeShowErrorMsg:msgReturn title:nil viewController:self.viewController block:^(BOOL OKCancel){
            if (OKCancel) {
                //[self.delegate ReturnError:msgReturn];
            }
            
        } ];
            
            [SVProgressHUD dismiss];
            
            
            return;
        }
     
        [self.delegate ReturnData:msgReturn];
        
        
    }else{//错误码 非0000
    
           dispatch_async(dispatch_get_main_queue(), ^{
                              [SVProgressHUD dismiss];
               
           });
        
        NSLog(@"%@ %@",msgReturn.errorCode,msgReturn.errorDesc);
        
  
  
        [PromptError changeShowErrorMsg:msgReturn title:nil viewController:self.viewController block:^(BOOL OKCancel){
            if (OKCancel) {
                      [self.delegate ReturnError:msgReturn];
            }
        
        } ];
    }
    
}



//实现一个创建单例对象的类方法




//这是单例对象遵循<NSCopying>协议时需要实现的方法
-(id) copyWithZone: (struct _NSZone *)zone{
    return self;
}


//- (NSString *)localIPAddress
//{
//    NSString *localIP = nil;
//    struct ifaddrs *addrs;
//    if (getifaddrs(&addrs)==0) {
//        const struct ifaddrs *cursor = addrs;
//        while (cursor != NULL) {
//            if (cursor->ifa_addr->sa_family == AF_INET && (cursor->ifa_flags & IFF_LOOPBACK) == 0)
//            {
//                //NSString *name = [NSString stringWithUTF8String:cursor->ifa_name];
//                //if ([name isEqualToString:@"en0"]) // Wi-Fi adapter
//                {
//                    localIP = [NSString stringWithUTF8String:inet_ntoa(((struct sockaddr_in *)cursor->ifa_addr)->sin_addr)];
//                    break;
//                }
//            }
//            cursor = cursor->ifa_next;
//        }
//        freeifaddrs(addrs);
//    }
//    return localIP;
//}


@end
